using SpreadsheetUtilities;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;

namespace PS3_Tester
{
    
    
    /// <summary>
    ///This is a test class for FormulaTest and is intended
    ///to contain all FormulaTest Unit Tests
    ///</summary>
    [TestClass()]
    public class FormulaTest
    {


        private TestContext testContextInstance;

        string formula = "9 + 9.100+ h1 * j54";
        Formula target;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for Formula Constructor
        ///</summary>
        [TestMethod()]
        public void FormulaConstructorTest()
        {
             // TODO: Initialize to an appropriate value
         
                target = new Formula(formula);
                if (target.Equals(null))
                    Assert.Fail();
                else
                    Assert.IsTrue(target != null);

               // if (!(target.ToString() == "2+4"))
                //    Assert.Fail();
                //target.Evaluate(getInt);

         
        }

        /// <summary>
        ///A test for Equals
        ///</summary>
        [TestMethod()]
        public void EqualsTest()
        {
           
            //string formula = string.Empty; // TODO: Initialize to an appropriate value
           // Formula target = new Formula(formula); // TODO: Initialize to an appropriate value
           // object obj = null; // TODO: Initialize to an appropriate value
            bool expected = false; // TODO: Initialize to an appropriate value
            bool actual;
            actual = new Formula("x1+2.0").Equals(new Formula_Accessor("x1+2.0"));
            Assert.AreEqual(expected, actual);
           
        }

        public static double getInt(String v)
        {
            if (v != null)
                return 1;

            else
                return 2;
        }


        /// <summary>
        ///A test for Evaluate
        ///</summary>
        [TestMethod()]
        public void EvaluateTest()
        {
          
            target = new Formula(formula); // TODO: Initialize to an appropriate value
            Func<string, double> lookup = getInt; // TODO: Initialize to an appropriate value
            object expected = (9.00 + 9.100).GetHashCode(); // TODO: Initialize to an appropriate value
            object actual;
            actual = target.Evaluate(lookup).GetHashCode();
           
            Assert.AreEqual(expected, actual);
            
        }

        /// <summary>
        ///A test for GetHashCode
        ///</summary>
        [TestMethod()]
        public void GetHashCodeTest()
        {
             
            target = new Formula(formula); // TODO: Initialize to an appropriate value
            int expected = 0; // TODO: Initialize to an appropriate value
            int actual;
            actual = target.GetHashCode();
            expected = target.GetHashCode();
            Assert.AreEqual(expected, actual);
            
        }

        /// <summary>
        ///A test for GetTokens
        ///</summary>
        [TestMethod()]
        [DeploymentItem("Formula.dll")]
        public void GetTokensTest()
        {
             // TODO: Initialize to an appropriate value
           // IEnumerable<string> expected = "2+4"; // TODO: Initialize to an appropriate value
            IEnumerable<string> actual;
            actual = Formula_Accessor.GetTokens(formula);
            string f = null;
            foreach (string s in actual)
            {
                f = f + s;
            }
            Assert.AreEqual("2+4", f);
            
        }

        /// <summary>
        ///A test for GetVariables
        ///</summary>
        [TestMethod()]
        public void GetVariablesTest()
        {

            target = new Formula(formula);

            //counts the number of variables
            int i = 0;
            
            foreach(string s in target.GetVariables())
            {
                i++;
            }

            int actual = i;
            int expected = 2;
            Assert.AreEqual(expected, actual);
           
        }

        /// <summary>
        ///A test for ToString
        ///</summary>
        [TestMethod()]
        public void ToStringTest()
        {
            string formula = string.Empty; // TODO: Initialize to an appropriate value
            Formula target = new Formula(formula); // TODO: Initialize to an appropriate value
            string expected = string.Empty; // TODO: Initialize to an appropriate value
            string actual;
            actual = target.ToString();
            Assert.AreEqual(expected, actual);
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for op_Equality
        ///</summary>
        [TestMethod()]
        public void op_EqualityTest()
        {
            Formula f1 = null; // TODO: Initialize to an appropriate value
            Formula f2 = null; // TODO: Initialize to an appropriate value
            bool expected = true; // TODO: Initialize to an appropriate value
            bool actual;
            actual = (f1 == f2);
            Assert.AreEqual(expected, actual);
            
        }

        /// <summary>
        ///A test for op_Inequality
        ///</summary>
        [TestMethod()]
        public void op_InequalityTest()
        {
            Formula f1 = null; // TODO: Initialize to an appropriate value
            Formula f2 = null; // TODO: Initialize to an appropriate value
            bool expected = false; // TODO: Initialize to an appropriate value
            bool actual;
            actual = (f1 != f2);
            Assert.AreEqual(expected, actual);
           
        }
    }
}
