// Skeleton written by Joe Zachary for CS 3500, September 2012
// Version 1.1.  Clarified the specification of ToString and addeed
//               Equals, operator==, operator!=, and GetHashCode.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace SpreadsheetUtilities
{
    /// <summary>
    /// Represents formulas written in standard infix notation using standard precedence
    /// rules.  The allowed symbols are non-negative numbers written using floating-point
    /// syntax, variables that consist of one or more letters followed by one or more 
    /// digits, parentheses, and the four operator symbols +, -, *, and /.
    /// </summary>
    public class Formula
    {



        /// <summary>
        /// CONSTRUCTOR - Creates a Formula from a string that consists of an infix expression written as
        /// described in the class comment.  If the expression is syntacticaly invalid,
        /// throws a FormulaFormatException with an explanatory Message.
        /// </summary>
        /// <param name="formula">String representation of the formula to be evaluated</param>
        public Formula(String formula)
        {
              
    //INTRA-CONSTRUCTIVE LOCAL VARIABLES***

                //counts the number of tokens in the string
            int tokenC = 0;

                //counts the number of opening vs closing perenthesis
            int openP = 0;
            int closeP = 0;

                //stores the last token
            string lastT = null;

    //*************************************


                //pass the formula string to the getTokens() method which will parse the string
                //and IEnumerate the formula one token at a time which we take and
                //analyse for syntactic correctness.
            foreach(string token in GetTokens(formula))
            {

                    //INTRA-ITERATIVE TOKEN COUNTERS************************

                                //if the token is opening perenthesis iterate the 
                                //counter accordingly
                            if (token == "(")
                                openP++;

                                //if the token is closing perenthesis iterate the 
                                //counter accordingly
                            if (token == ")")
                                closeP++;

                                //iterates the token counter
                            tokenC++;

                        //*************************************



                    //INTRA-ITERATIVE EXCEPTION CHECKING*******************
                    
                                //if this is the first token.........
                            if (tokenC == 0)
                            {
                                    //checks that the first token of the expression is either a number a variable or an opening perenthesis.
                                if (!(Regex.IsMatch(token, @"^[a-zA-Z]+\d+$")) || (Regex.IsMatch(token, @"^[0-9]+$")) || (Regex.IsMatch(token, @"^[(]+$")))
                                {
                                    new FormulaFormatException("Formula must begin with either a Variable, Number, or Open Perenthesis");
                                }

                            }//end if token is first


                                //if the last token was an "(" this verifies that the current token is of valid type (var, number, "(") else it throws eception
                            if ((Regex.IsMatch(lastT, @"^[\+\-*/(]+$")) && (!(Regex.IsMatch(token, @"^[a-zA-Z]+\d+$")) || (Regex.IsMatch(token, @"^[0-9]+$")) || (Regex.IsMatch(token, @"^[(]+$"))))
                                {
                                    new FormulaFormatException("The item immediately proceeding the Open Perenthesis must be either a variable, number or an open perenthesis.");
                                }


                                //if the last token was a variable, number or a closing perenthesis then....
                            if ((Regex.IsMatch(lastT, @"^[a-zA-Z]+\d+$")) || (Regex.IsMatch(lastT, @"^[0-9]+$")) || (Regex.IsMatch(lastT, @"^[)]+$")))
                            {
                                    //if current token is NOT an operator or a closing perenthesis throw exception
                                if(!(Regex.IsMatch(lastT, @"^[\+\-*/(]+$")) || (Regex.IsMatch(lastT, @"^[)]+$")))
                                    new FormulaFormatException("The item immediately folowing a variable, number or closing perenthesis must be a closing perenthesis or an operator.");
                            }


                                //if the number of closing perenthesis is greater than opening throw exception
                            if (closeP > openP)
                                new FormulaFormatException("The number of closing perenthesis cannot exceed the number of opening");


                        //***********************************************
                

                    //stores the current token for future analysis

                lastT = token;


            }//end foreach iterator



                //POST ITERATIVE FORMULA CHECKS***********


                                //checks that the number of tokens is at least 1
                            if (tokenC != 1)//*** PROGRAMING NOTE *** may need to change to tokenC != 2 if fails the must have one token test
                                new FormulaFormatException("There must be at least one valid token in your expression");


                                //checks that the last token in the iterator was either a number a variable or a closing perenthesis
                            if(!(Regex.IsMatch(lastT, @"^[a-zA-Z]+$")) || (Regex.IsMatch(lastT, @"^[\d]+$")) || (Regex.IsMatch(lastT, @"^[)]+$")))
                                new FormulaFormatException("Formula must end with either a Variable, Number, or Closing Perenthesis");
                            
      
                                //checks that the number of opening and closing perenthesis are equal
                            if(openP != closeP)
                                new FormulaFormatException("The number of closing perenthesis MUST EQUAL the number of opening");


                    //***********************************
                                




        }//End Constructor

        /// <summary>
        /// Evaluates this Formula, using the lookup delegate to determine the values of
        /// variables.  
        /// 
        /// Given a variable symbol as its parameter, lookup returns the
        /// variable's value (if it has one) or throws an ArgumentException (otherwise).
        /// 
        /// If no undefined variables or divisions by zero are encountered when evaluating 
        /// this Formula, the value is returned.  Otherwise, a FormulaError is returned.  
        /// The Reason property of the FormulaError should have a meaningful explanation.
        /// </summary>
        public object Evaluate(Func<string, double> lookup)
        {
            return null;
        }

        /// <summary>
        /// Enumerates all of the variables that occur in this formula.  No variable
        /// may appear more than once in the enumeration, even if it appears more than
        /// once in this Formula.
        /// </summary>
        public IEnumerable<String> GetVariables()
        {
            return null;
        }

        /// <summary>
        /// Returns a string containing no spaces which, if passed to the Formula
        /// constructor, will produce a Formula f such that this.Equals(f).
        /// </summary>
        public override string ToString()
        {
            return null;
        }

        /// <summary>
        /// If obj is null or obj is not a Formula, returns false.  Otherwise, reports
        /// whether or not this Formula and obj are equal.
        /// 
        /// Two Formulae are considered equal if they consist of the same tokens in the
        /// same order.  All tokens are compared as strings except for numeric tokens,
        /// which are compared as doubles.
        /// 
        /// Here are some examples.  
        /// new Formula("x1+y2").Equals(new Formula("x1  +  y2")) is true
        /// new Formula("x1+y2").Equalas(new Formula("y2+x1")) is false
        /// new Formula("2.0 + x7").Equals(new Formula("2.000 + x7")) is true
        /// </summary>
        public override bool Equals(object obj)
        {
            return false;
        }

        /// <summary>
        /// Reports whether f1 == f2, using the notion of equality from the Equals method.
        /// Note that if both f1 and f2 are null, this method should return true.  If one is
        /// null and one is not, this method should return false.
        /// </summary>
        public static bool operator ==(Formula f1, Formula f2)
        {
            return false;
        }

        /// <summary>
        /// Reports whether f1 != f2, using the notion of equality from the Equals method.
        /// Note that if both f1 and f2 are null, this method should return false.  If one is
        /// null and one is not, this method should return true.
        /// </summary>
        public static bool operator !=(Formula f1, Formula f2)
        {
            return false;
        }

        /// <summary>
        /// Returns a hash code for this Formula.
        /// </summary>
        public override int GetHashCode()
        {
            return 0;
        }

        /// <summary>
        /// Given a formula, enumerates the tokens that compose it.  Tokens are left paren,
        /// right paren, one of the four operator symbols, a string consisting of one or more
        /// letters followed by one or more digits, a double literal, and anything that doesn't
        /// match one of those patterns.  There are no empty tokens, and no token contains white space.
        /// </summary>
        private static IEnumerable<string> GetTokens(String formula)
        {
            // Patterns for individual tokens
            String lpPattern = @"\(";
            String rpPattern = @"\)";
            String opPattern = @"[\+\-*/]";
            String varPattern = @"[a-zA-Z]+\d+";
            String doublePattern = @"(?: \d+\.\d* | \d*\.\d+ | \d+ ) (?: e[\+-]?\d+)?";
            String spacePattern = @"\s+";

            // Overall pattern
            String pattern = String.Format("({0}) | ({1}) | ({2}) | ({3}) | ({4}) | ({5})",
                                            lpPattern, rpPattern, opPattern, varPattern, doublePattern, spacePattern);

            // Enumerate matching tokens that don't consist solely of white space.
            foreach (String s in Regex.Split(formula, pattern, RegexOptions.IgnorePatternWhitespace))
            {
                if (!Regex.IsMatch(s, @"^\s*$", RegexOptions.Singleline))
                {
                    yield return s;
                }
            }

        }
    }

    /// <summary>
    /// Used to report syntactic errors in the argument to the Formula constructor.
    /// </summary>
    public class FormulaFormatException : Exception
    {
        /// <summary>
        /// Constructs a FormulaFormatException containing the explanatory message.
        /// </summary>
        public FormulaFormatException(String message)
            : base(message)
        {
        }
    }

    /// <summary>
    /// Used as a possible return value of the Formula.Evaluate method.
    /// </summary>
    public struct FormulaError
    {
        /// <summary>
        /// Constructs a FormulaError containing the explanatory reason.
        /// </summary>
        /// <param name="reason"></param>
        public FormulaError(String reason)
            : this()
        {
            Reason = reason;
        }

        /// <summary>
        ///  The reason why this FormulaError was created.
        /// </summary>
        public string Reason { get; private set; }
    }
}

