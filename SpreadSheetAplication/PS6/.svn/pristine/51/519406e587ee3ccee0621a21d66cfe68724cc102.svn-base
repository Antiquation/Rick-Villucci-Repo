// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadSheetTest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Release\SpreadsheetGUI.exe'
            ApplicationUnderTest uINewSheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod1Params.UINewSheetWindowExePath, this.RecordedMethod1Params.UINewSheetWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(85, 38));
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uICellNameEdit = this.UINewSheetWindow.UICellNameWindow.UICellNameEdit;
            #endregion

            // Verify that 'cellName' text box's property 'Text' equals 'A1='
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UICellNameEditText, uICellNameEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod2
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinTitleBar uINewSheetTitleBar = this.UINewSheetWindow.UINewSheetTitleBar;
            WinMenuItem uIHowtousethisprogramMenuItem = this.UINewSheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIHowtousethisprogramMenuItem;
            #endregion

            // Click 'NewSheet***' title bar
            Mouse.Click(uINewSheetTitleBar, new Point(462, 10));

            // Click 'Help' -> 'How to use this program' menu item
            Mouse.Click(uIHowtousethisprogramMenuItem, new Point(40, 9));
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinText uIWhenopeningthisappliText = this.UIWhenopeningthisappliWindow.UIWhenopeningthisappliText;
            #endregion

            // Verify that 'When opening this application it will be necessary...' label's property 'DisplayText' equals 'When opening this application it will be necessary to FIRST select a cell with your mouse /n Then to add a value or a formula to the selected cell click in the box marked FX.../n next press the ENTER kee to load the value into the cell permanently... or press escape if you change your mind.../nIf the boxes turn green you know the values loaded succesfully... If any of the boxes turn red there is an error message - read and fix.../nif your file is not saved you will see an asteric next to the file name... If you wish to save or open a new or preexisting file use the file menu.'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIWhenopeningthisappliTextDisplayText, uIWhenopeningthisappliText.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod3 - Use 'RecordedMethod3Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WinTitleBar uIItemTitleBar = this.UIItemWindow.UIItemWindow1.UIItemTitleBar;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinEdit uICellContentEdit = this.UINewSheetWindow.UISELECTCELLTHENCLICKHWindow.UICellContentEdit;
            WinClient uISpreadsheetPanel1Client = this.UINewSheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'Unknown Name' title bar
            Mouse.Click(uIItemTitleBar, new Point(274, 10));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(51, 13));

            // Type '1' in 'cellContent' text box
            uICellContentEdit.Text = this.RecordedMethod3Params.UICellContentEditText;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.RecordedMethod3Params.UICellContentEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(154, 82));

            // Type '=A1' in 'cellContent' text box
            uICellContentEdit.Text = this.RecordedMethod3Params.UICellContentEditText1;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.RecordedMethod3Params.UICellContentEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(236, 278));

            // Type '=A1' in 'cellContent' text box
            uICellContentEdit.Text = this.RecordedMethod3Params.UICellContentEditText2;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.RecordedMethod3Params.UICellContentEditSendKeys2, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(391, 97));

            // Type '=A1+B3+C13' in 'cellContent' text box
            uICellContentEdit.Text = this.RecordedMethod3Params.UICellContentEditText3;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.RecordedMethod3Params.UICellContentEditSendKeys3, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(391, 97));
        }
        
        /// <summary>
        /// AssertMethod3 - Use 'AssertMethod3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod3()
        {
            #region Variable Declarations
            WinEdit uICellNameEdit = this.UINewSheetWindow.UICellNameWindow.UICellNameEdit;
            #endregion

            // Verify that 'cellName' text box's property 'Text' equals 'E4=3'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UICellNameEditText, uICellNameEdit.Text);
        }
        
        /// <summary>
        /// AssertMethod4 - Use 'AssertMethod4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod4()
        {
            #region Variable Declarations
            WinEdit uICellContentEdit = this.UINewSheetWindow.UISELECTCELLTHENCLICKHWindow.UICellContentEdit;
            #endregion

            // Verify that 'cellContent' text box's property 'Text' equals '= A1+B3+C13'
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UICellContentEditText, uICellContentEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod4
        /// </summary>
        public void RecordedMethod4()
        {
            #region Variable Declarations
            WinTitleBar uINewSheetTitleBar = this.UINewSheetWindow.UINewSheetTitleBar;
            WinMenuItem uIAboutMenuItem = this.UINewSheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIAboutMenuItem;
            #endregion

            // Click 'NewSheet***' title bar
            Mouse.Click(uINewSheetTitleBar, new Point(389, 13));

            // Click 'Help' -> 'About' menu item
            Mouse.Click(uIAboutMenuItem, new Point(63, 15));
        }
        
        /// <summary>
        /// AssertMethod5 - Use 'AssertMethod5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod5()
        {
            #region Variable Declarations
            WinText uIWrittenanddevelopedbText = this.UIWrittenanddevelopedbWindow.UIWrittenanddevelopedbText;
            #endregion

            // Verify that 'Written and developed by Nephi Self 2012   Version...' label's property 'DisplayText' equals 'Written and developed by Nephi Self 2012 
            // Version PS6'
            Assert.AreEqual(this.AssertMethod5ExpectedValues.UIWrittenanddevelopedbTextDisplayText, uIWrittenanddevelopedbText.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod5
        /// </summary>
        public void RecordedMethod5()
        {
            #region Variable Declarations
            WinTitleBar uIItemTitleBar = this.UIItemWindow.UIItemWindow1.UIItemTitleBar;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Click 'Unknown Name' title bar
            Mouse.Click(uIItemTitleBar, new Point(117, 6));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(37, 6));
        }
        
        /// <summary>
        /// AssertMethod6 - Use 'AssertMethod6ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod6()
        {
            #region Variable Declarations
            WinTitleBar uINewSheetTitleBar = this.UINewSheetWindow.UINewSheetTitleBar;
            #endregion

            // Verify that 'NewSheet***' title bar's property 'DisplayText' equals 'NewSheet***'
            Assert.AreEqual(this.AssertMethod6ExpectedValues.UINewSheetTitleBarDisplayText, uINewSheetTitleBar.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod6
        /// </summary>
        public void RecordedMethod6()
        {
            #region Variable Declarations
            WinTitleBar uINewSheetTitleBar = this.UINewSheetWindow.UINewSheetTitleBar;
            WinMenuItem uINewMenuItem = this.UINewSheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            #endregion

            // Click 'NewSheet***' title bar
            Mouse.Click(uINewSheetTitleBar, new Point(157, 9));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(65, 11));
        }
        
        /// <summary>
        /// AssertMethod7 - Use 'AssertMethod7ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod7()
        {
            #region Variable Declarations
            WinTitleBar uINewSheetTitleBar = this.UINewSheetWindow.UINewSheetTitleBar;
            #endregion

            // Verify that 'NewSheet***' title bar's property 'DisplayText' equals 'NewSheet'
            Assert.AreEqual(this.AssertMethod7ExpectedValues.UINewSheetTitleBarDisplayText, uINewSheetTitleBar.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod7 - Use 'RecordedMethod7Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod7()
        {
            #region Variable Declarations
            WinTitleBar uINewSheetTitleBar = this.UINewSheetWindow.UINewSheetTitleBar;
            WinButton uICloseButton = this.UINewSheetWindow.UINewSheetTitleBar.UICloseButton;
            WinMenuItem uIOpenMenuItem = this.UINewSheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UITest2ssListItem.UINameEdit;
            WinComboBox uIFilesoftypeComboBox = this.UIOpenWindow.UIItemWindow1.UIFilesoftypeComboBox;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            WinClient uISpreadsheetPanel1Client = this.UICUsersNephiDocumentsWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'NewSheet***' title bar
            Mouse.Click(uINewSheetTitleBar, new Point(615, 5));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(38, 7));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(68, 14));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(3, 10));

            // Select 'Spreadsheet Files (.ss)' in 'Files of type:' combo box
            uIFilesoftypeComboBox.SelectedItem = this.RecordedMethod7Params.UIFilesoftypeComboBoxSelectedItem;

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(30, 7));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(310, 140));
        }
        
        /// <summary>
        /// AssertMethod8 - Use 'AssertMethod8ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod8()
        {
            #region Variable Declarations
            WinEdit uICellNameEdit = this.UICUsersNephiDocumentsWindow.UICellNameWindow.UICellNameEdit;
            #endregion

            // Verify that 'cellName' text box's property 'Text' equals 'D6=234958723'
            Assert.AreEqual(this.AssertMethod8ExpectedValues.UICellNameEditText, uICellNameEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod8 - Use 'RecordedMethod8Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod8()
        {
            #region Variable Declarations
            WinTitleBar uICUsersNephiDocumentsTitleBar = this.UICUsersNephiDocumentsWindow.UICUsersNephiDocumentsTitleBar;
            WinMenuItem uISaveMenuItem = this.UICUsersNephiDocumentsWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinClient uISpreadsheetPanel1Client = this.UICUsersNephiDocumentsWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinClient uISpreadsheetPanel1Client1 = this.UICUsersNephiDocumentsWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinEdit uICellContentEdit = this.UICUsersNephiDocumentsWindow.UISELECTCELLTHENCLICKHWindow.UICellContentEdit;
            #endregion

            // Click 'C:\Users\Nephi\Documents\Visual Studio 2010\Projec...' title bar
            Mouse.Click(uICUsersNephiDocumentsTitleBar, new Point(385, 9));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(58, 7));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(332, 223));

            // Type '25' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.RecordedMethod8Params.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type '25' in 'cellContent' text box
            uICellContentEdit.Text = this.RecordedMethod8Params.UICellContentEditText;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.RecordedMethod8Params.UICellContentEditSendKeys, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(68, 10));
        }
        
        /// <summary>
        /// AssertMethod9 - Use 'AssertMethod9ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod9()
        {
            #region Variable Declarations
            WinTitleBar uICUsersNephiDocumentsTitleBar = this.UICUsersNephiDocumentsWindow.UICUsersNephiDocumentsTitleBar;
            #endregion

            // Verify that 'C:\Users\Nephi\Documents\Visual Studio 2010\Projec...' title bar's property 'DisplayText' equals 'C:\Users\Nephi\Documents\Visual Studio 2010\Projects\PS6\SpreadsheetGUI\bin\Release\test2.ss'
            Assert.AreEqual(this.AssertMethod9ExpectedValues.UICUsersNephiDocumentsTitleBarDisplayText, uICUsersNephiDocumentsTitleBar.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod9 - Use 'RecordedMethod9Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod9()
        {
            #region Variable Declarations
            WinTitleBar uICUsersNephiDocumentsTitleBar = this.UICUsersNephiDocumentsWindow.UICUsersNephiDocumentsTitleBar;
            WinMenuItem uISaveasMenuItem = this.UICUsersNephiDocumentsWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveasMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveTheSpreadsheetWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveTheSpreadsheetWindow.UISaveWindow.UISaveButton;
            #endregion

            // Click 'C:\Users\Nephi\Documents\Visual Studio 2010\Projec...' title bar
            Mouse.Click(uICUsersNephiDocumentsTitleBar, new Point(492, 10));

            // Click 'File' -> 'Save as' menu item
            Mouse.Click(uISaveasMenuItem, new Point(62, 14));

            // Select '34' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod9Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(35, 8));
        }
        
        /// <summary>
        /// AssertMethod10 - Use 'AssertMethod10ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod10()
        {
            #region Variable Declarations
            WinTitleBar uICUsersNephiDocumentsTitleBar = this.UICUsersNephiDocumentsWindow.UICUsersNephiDocumentsTitleBar;
            #endregion

            // Verify that 'C:\Users\Nephi\Documents\Visual Studio 2010\Projec...' title bar's property 'DisplayText' equals 'C:\Users\Nephi\Documents\Visual Studio 2010\Projects\PS6\SpreadsheetGUI\bin\Release\34.ss'
            Assert.AreEqual(this.AssertMethod10ExpectedValues.UICUsersNephiDocumentsTitleBarDisplayText, uICUsersNephiDocumentsTitleBar.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod10
        /// </summary>
        public void RecordedMethod10()
        {
            #region Variable Declarations
            WinTitleBar uICUsersNephiDocumentsTitleBar = this.UICUsersNephiDocumentsWindow1.UICUsersNephiDocumentsTitleBar;
            WinMenuItem uICloseMenuItem = this.UICUsersNephiDocumentsWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            WinClient uISpreadsheetPanel1Client = this.UINewSheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'C:\Users\Nephi\Documents\Visual Studio 2010\Projec...' title bar
            Mouse.Click(uICUsersNephiDocumentsTitleBar, new Point(454, 13));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(56, 5));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(484, 145));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(377, 102));
        }
        
        /// <summary>
        /// AssertMethod11 - Use 'AssertMethod11ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod11()
        {
            #region Variable Declarations
            WinEdit uICellContentEdit = this.UINewSheetWindow.UISELECTCELLTHENCLICKHWindow.UICellContentEdit;
            #endregion

            // Verify that 'cellContent' text box's property 'Text' equals '= A1+B3+C13'
            Assert.AreEqual(this.AssertMethod11ExpectedValues.UICellContentEditText, uICellContentEdit.Text);
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual RecordedMethod3Params RecordedMethod3Params
        {
            get
            {
                if ((this.mRecordedMethod3Params == null))
                {
                    this.mRecordedMethod3Params = new RecordedMethod3Params();
                }
                return this.mRecordedMethod3Params;
            }
        }
        
        public virtual AssertMethod3ExpectedValues AssertMethod3ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod3ExpectedValues == null))
                {
                    this.mAssertMethod3ExpectedValues = new AssertMethod3ExpectedValues();
                }
                return this.mAssertMethod3ExpectedValues;
            }
        }
        
        public virtual AssertMethod4ExpectedValues AssertMethod4ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod4ExpectedValues == null))
                {
                    this.mAssertMethod4ExpectedValues = new AssertMethod4ExpectedValues();
                }
                return this.mAssertMethod4ExpectedValues;
            }
        }
        
        public virtual AssertMethod5ExpectedValues AssertMethod5ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod5ExpectedValues == null))
                {
                    this.mAssertMethod5ExpectedValues = new AssertMethod5ExpectedValues();
                }
                return this.mAssertMethod5ExpectedValues;
            }
        }
        
        public virtual AssertMethod6ExpectedValues AssertMethod6ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod6ExpectedValues == null))
                {
                    this.mAssertMethod6ExpectedValues = new AssertMethod6ExpectedValues();
                }
                return this.mAssertMethod6ExpectedValues;
            }
        }
        
        public virtual AssertMethod7ExpectedValues AssertMethod7ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod7ExpectedValues == null))
                {
                    this.mAssertMethod7ExpectedValues = new AssertMethod7ExpectedValues();
                }
                return this.mAssertMethod7ExpectedValues;
            }
        }
        
        public virtual RecordedMethod7Params RecordedMethod7Params
        {
            get
            {
                if ((this.mRecordedMethod7Params == null))
                {
                    this.mRecordedMethod7Params = new RecordedMethod7Params();
                }
                return this.mRecordedMethod7Params;
            }
        }
        
        public virtual AssertMethod8ExpectedValues AssertMethod8ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod8ExpectedValues == null))
                {
                    this.mAssertMethod8ExpectedValues = new AssertMethod8ExpectedValues();
                }
                return this.mAssertMethod8ExpectedValues;
            }
        }
        
        public virtual RecordedMethod8Params RecordedMethod8Params
        {
            get
            {
                if ((this.mRecordedMethod8Params == null))
                {
                    this.mRecordedMethod8Params = new RecordedMethod8Params();
                }
                return this.mRecordedMethod8Params;
            }
        }
        
        public virtual AssertMethod9ExpectedValues AssertMethod9ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod9ExpectedValues == null))
                {
                    this.mAssertMethod9ExpectedValues = new AssertMethod9ExpectedValues();
                }
                return this.mAssertMethod9ExpectedValues;
            }
        }
        
        public virtual RecordedMethod9Params RecordedMethod9Params
        {
            get
            {
                if ((this.mRecordedMethod9Params == null))
                {
                    this.mRecordedMethod9Params = new RecordedMethod9Params();
                }
                return this.mRecordedMethod9Params;
            }
        }
        
        public virtual AssertMethod10ExpectedValues AssertMethod10ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod10ExpectedValues == null))
                {
                    this.mAssertMethod10ExpectedValues = new AssertMethod10ExpectedValues();
                }
                return this.mAssertMethod10ExpectedValues;
            }
        }
        
        public virtual AssertMethod11ExpectedValues AssertMethod11ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod11ExpectedValues == null))
                {
                    this.mAssertMethod11ExpectedValues = new AssertMethod11ExpectedValues();
                }
                return this.mAssertMethod11ExpectedValues;
            }
        }
        
        public UINewSheetWindow UINewSheetWindow
        {
            get
            {
                if ((this.mUINewSheetWindow == null))
                {
                    this.mUINewSheetWindow = new UINewSheetWindow();
                }
                return this.mUINewSheetWindow;
            }
        }
        
        public UIWhenopeningthisappliWindow UIWhenopeningthisappliWindow
        {
            get
            {
                if ((this.mUIWhenopeningthisappliWindow == null))
                {
                    this.mUIWhenopeningthisappliWindow = new UIWhenopeningthisappliWindow();
                }
                return this.mUIWhenopeningthisappliWindow;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIWrittenanddevelopedbWindow UIWrittenanddevelopedbWindow
        {
            get
            {
                if ((this.mUIWrittenanddevelopedbWindow == null))
                {
                    this.mUIWrittenanddevelopedbWindow = new UIWrittenanddevelopedbWindow();
                }
                return this.mUIWrittenanddevelopedbWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UICUsersNephiDocumentsWindow UICUsersNephiDocumentsWindow
        {
            get
            {
                if ((this.mUICUsersNephiDocumentsWindow == null))
                {
                    this.mUICUsersNephiDocumentsWindow = new UICUsersNephiDocumentsWindow();
                }
                return this.mUICUsersNephiDocumentsWindow;
            }
        }
        
        public UISaveTheSpreadsheetWindow UISaveTheSpreadsheetWindow
        {
            get
            {
                if ((this.mUISaveTheSpreadsheetWindow == null))
                {
                    this.mUISaveTheSpreadsheetWindow = new UISaveTheSpreadsheetWindow();
                }
                return this.mUISaveTheSpreadsheetWindow;
            }
        }
        
        public UICUsersNephiDocumentsWindow1 UICUsersNephiDocumentsWindow1
        {
            get
            {
                if ((this.mUICUsersNephiDocumentsWindow1 == null))
                {
                    this.mUICUsersNephiDocumentsWindow1 = new UICUsersNephiDocumentsWindow1();
                }
                return this.mUICUsersNephiDocumentsWindow1;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private RecordedMethod3Params mRecordedMethod3Params;
        
        private AssertMethod3ExpectedValues mAssertMethod3ExpectedValues;
        
        private AssertMethod4ExpectedValues mAssertMethod4ExpectedValues;
        
        private AssertMethod5ExpectedValues mAssertMethod5ExpectedValues;
        
        private AssertMethod6ExpectedValues mAssertMethod6ExpectedValues;
        
        private AssertMethod7ExpectedValues mAssertMethod7ExpectedValues;
        
        private RecordedMethod7Params mRecordedMethod7Params;
        
        private AssertMethod8ExpectedValues mAssertMethod8ExpectedValues;
        
        private RecordedMethod8Params mRecordedMethod8Params;
        
        private AssertMethod9ExpectedValues mAssertMethod9ExpectedValues;
        
        private RecordedMethod9Params mRecordedMethod9Params;
        
        private AssertMethod10ExpectedValues mAssertMethod10ExpectedValues;
        
        private AssertMethod11ExpectedValues mAssertMethod11ExpectedValues;
        
        private UINewSheetWindow mUINewSheetWindow;
        
        private UIWhenopeningthisappliWindow mUIWhenopeningthisappliWindow;
        
        private UIItemWindow2 mUIItemWindow;
        
        private UIOKWindow mUIOKWindow;
        
        private UIWrittenanddevelopedbWindow mUIWrittenanddevelopedbWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UICUsersNephiDocumentsWindow mUICUsersNephiDocumentsWindow;
        
        private UISaveTheSpreadsheetWindow mUISaveTheSpreadsheetWindow;
        
        private UICUsersNephiDocumentsWindow1 mUICUsersNephiDocumentsWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Release\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSheetWindowExePath = "C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
            "se\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Release\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Release\\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'cellName' text box's property 'Text' equals 'A1='
        /// </summary>
        public string UICellNameEditText = "A1=";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'When opening this application it will be necessary...' label's property 'DisplayText' equals 'When opening this application it will be necessary to FIRST select a cell with your mouse /n Then to add a value or a formula to the selected cell click in the box marked FX.../n next press the ENTER kee to load the value into the cell permanently... or press escape if you change your mind.../nIf the boxes turn green you know the values loaded succesfully... If any of the boxes turn red there is an error message - read and fix.../nif your file is not saved you will see an asteric next to the file name... If you wish to save or open a new or preexisting file use the file menu.'
        /// </summary>
        public string UIWhenopeningthisappliTextDisplayText = @"When opening this application it will be necessary to FIRST select a cell with your mouse /n Then to add a value or a formula to the selected cell click in the box marked FX.../n next press the ENTER kee to load the value into the cell permanently... or press escape if you change your mind.../nIf the boxes turn green you know the values loaded succesfully... If any of the boxes turn red there is an error message - read and fix.../nif your file is not saved you will see an asteric next to the file name... If you wish to save or open a new or preexisting file use the file menu.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod3Params
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=A1' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText1 = "=A1";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=A1' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText2 = "=A1";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '=A1+B3+C13' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText3 = "=A1+B3+C13";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys3 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'cellName' text box's property 'Text' equals 'E4=3'
        /// </summary>
        public string UICellNameEditText = "E4=3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'cellContent' text box's property 'Text' equals '= A1+B3+C13'
        /// </summary>
        public string UICellContentEditText = "= A1+B3+C13";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Written and developed by Nephi Self 2012   Version...' label's property 'DisplayText' equals 'Written and developed by Nephi Self 2012 
        /// Version PS6'
        /// </summary>
        public string UIWrittenanddevelopedbTextDisplayText = "Written and developed by Nephi Self 2012 \n Version PS6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod6ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'NewSheet***' title bar's property 'DisplayText' equals 'NewSheet***'
        /// </summary>
        public string UINewSheetTitleBarDisplayText = "NewSheet***";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'NewSheet***' title bar's property 'DisplayText' equals 'NewSheet'
        /// </summary>
        public string UINewSheetTitleBarDisplayText = "NewSheet***";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod7Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'Spreadsheet Files (.ss)' in 'Files of type:' combo box
        /// </summary>
        public string UIFilesoftypeComboBoxSelectedItem = "Spreadsheet Files (.ss)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'cellName' text box's property 'Text' equals 'D6=234958723'
        /// </summary>
        public string UICellNameEditText = "D6=234958723";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod8Params
    {
        
        #region Fields
        /// <summary>
        /// Type '25' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "25";
        
        /// <summary>
        /// Type '25' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText = "25";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod9ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'C:\Users\Nephi\Documents\Visual Studio 2010\Projec...' title bar's property 'DisplayText' equals 'C:\Users\Nephi\Documents\Visual Studio 2010\Projects\PS6\SpreadsheetGUI\bin\Release\test2.ss'
        /// </summary>
        public string UICUsersNephiDocumentsTitleBarDisplayText = "C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
            "se\\test2.ss";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod9Params
    {
        
        #region Fields
        /// <summary>
        /// Select '34' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "34";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod10ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'C:\Users\Nephi\Documents\Visual Studio 2010\Projec...' title bar's property 'DisplayText' equals 'C:\Users\Nephi\Documents\Visual Studio 2010\Projects\PS6\SpreadsheetGUI\bin\Release\34.ss'
        /// </summary>
        public string UICUsersNephiDocumentsTitleBarDisplayText = "C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
            "se\\34.ss";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'cellContent' text box's property 'Text' equals '= A1+B3+C13'
        /// </summary>
        public string UICellContentEditText = "= A1+B3+C13";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINewSheetWindow : WinWindow
    {
        
        public UINewSheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "NewSheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("NewSheet");
            this.WindowTitles.Add("NewSheet***");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICellNameWindow UICellNameWindow
        {
            get
            {
                if ((this.mUICellNameWindow == null))
                {
                    this.mUICellNameWindow = new UICellNameWindow(this);
                }
                return this.mUICellNameWindow;
            }
        }
        
        public UINewSheetTitleBar UINewSheetTitleBar
        {
            get
            {
                if ((this.mUINewSheetTitleBar == null))
                {
                    this.mUINewSheetTitleBar = new UINewSheetTitleBar(this);
                }
                return this.mUINewSheetTitleBar;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UISELECTCELLTHENCLICKHWindow UISELECTCELLTHENCLICKHWindow
        {
            get
            {
                if ((this.mUISELECTCELLTHENCLICKHWindow == null))
                {
                    this.mUISELECTCELLTHENCLICKHWindow = new UISELECTCELLTHENCLICKHWindow(this);
                }
                return this.mUISELECTCELLTHENCLICKHWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UICellNameWindow mUICellNameWindow;
        
        private UINewSheetTitleBar mUINewSheetTitleBar;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UISELECTCELLTHENCLICKHWindow mUISELECTCELLTHENCLICKHWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("NewSheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("NewSheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICellNameWindow : WinWindow
    {
        
        public UICellNameWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellName";
            this.WindowTitles.Add("NewSheet***");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellNameEdit
        {
            get
            {
                if ((this.mUICellNameEdit == null))
                {
                    this.mUICellNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellNameEdit.WindowTitles.Add("NewSheet***");
                    #endregion
                }
                return this.mUICellNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINewSheetTitleBar : WinTitleBar
    {
        
        public UINewSheetTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("NewSheet***");
            this.WindowTitles.Add("NewSheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("NewSheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("NewSheet***");
            #endregion
        }
        
        #region Properties
        public UIHelpMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIHelpMenuItem mUIHelpMenuItem;
        
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHelpMenuItem : WinMenuItem
    {
        
        public UIHelpMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("NewSheet***");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIHowtousethisprogramMenuItem
        {
            get
            {
                if ((this.mUIHowtousethisprogramMenuItem == null))
                {
                    this.mUIHowtousethisprogramMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIHowtousethisprogramMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "How to use this program";
                    this.mUIHowtousethisprogramMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIHowtousethisprogramMenuItem.WindowTitles.Add("NewSheet***");
                    #endregion
                }
                return this.mUIHowtousethisprogramMenuItem;
            }
        }
        
        public WinMenuItem UIAboutMenuItem
        {
            get
            {
                if ((this.mUIAboutMenuItem == null))
                {
                    this.mUIAboutMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIAboutMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "About";
                    this.mUIAboutMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIAboutMenuItem.WindowTitles.Add("NewSheet***");
                    #endregion
                }
                return this.mUIAboutMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIHowtousethisprogramMenuItem;
        
        private WinMenuItem mUIAboutMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("NewSheet***");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("NewSheet***");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("NewSheet***");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISELECTCELLTHENCLICKHWindow : WinWindow
    {
        
        public UISELECTCELLTHENCLICKHWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellContent";
            this.WindowTitles.Add("NewSheet***");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentEdit
        {
            get
            {
                if ((this.mUICellContentEdit == null))
                {
                    this.mUICellContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Fx:";
                    this.mUICellContentEdit.WindowTitles.Add("NewSheet***");
                    #endregion
                }
                return this.mUICellContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWhenopeningthisappliWindow : WinWindow
    {
        
        public UIWhenopeningthisappliWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = @"When opening this application it will be necessary to FIRST select a cell with your mouse /n Then to add a value or a formula to the selected cell click in the box marked FX.../n next press the ENTER kee to load the value into the cell permanently... or press escape if you change your mind.../nIf the boxes turn green you know the values loaded succesfully... If any of the boxes turn red there is an error message - read and fix.../nif your file is not saved you will see an asteric next to the file name... If you wish to save or open a new or preexisting file use the file menu.";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Static";
            this.WindowTitles.Add(@"When opening this application it will be necessary to FIRST select a cell with your mouse /n Then to add a value or a formula to the selected cell click in the box marked FX.../n next press the ENTER kee to load the value into the cell permanently... or press escape if you change your mind.../nIf the boxes turn green you know the values loaded succesfully... If any of the boxes turn red there is an error message - read and fix.../nif your file is not saved you will see an asteric next to the file name... If you wish to save or open a new or preexisting file use the file menu.");
            #endregion
        }
        
        #region Properties
        public WinText UIWhenopeningthisappliText
        {
            get
            {
                if ((this.mUIWhenopeningthisappliText == null))
                {
                    this.mUIWhenopeningthisappliText = new WinText(this);
                    #region Search Criteria
                    this.mUIWhenopeningthisappliText.SearchProperties[WinText.PropertyNames.Name] = @"When opening this application it will be necessary to FIRST select a cell with your mouse /n Then to add a value or a formula to the selected cell click in the box marked FX.../n next press the ENTER kee to load the value into the cell permanently... or press escape if you change your mind.../nIf the boxes turn green you know the values loaded succesfully... If any of the boxes turn red there is an error message - read and fix.../nif your file is not saved you will see an asteric next to the file name... If you wish to save or open a new or preexisting file use the file menu.";
                    this.mUIWhenopeningthisappliText.WindowTitles.Add(@"When opening this application it will be necessary to FIRST select a cell with your mouse /n Then to add a value or a formula to the selected cell click in the box marked FX.../n next press the ENTER kee to load the value into the cell permanently... or press escape if you change your mind.../nIf the boxes turn green you know the values loaded succesfully... If any of the boxes turn red there is an error message - read and fix.../nif your file is not saved you will see an asteric next to the file name... If you wish to save or open a new or preexisting file use the file menu.");
                    #endregion
                }
                return this.mUIWhenopeningthisappliText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIWhenopeningthisappliText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIItemTitleBar
        {
            get
            {
                if ((this.mUIItemTitleBar == null))
                {
                    this.mUIItemTitleBar = new WinTitleBar(this);
                }
                return this.mUIItemTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIItemTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWrittenanddevelopedbWindow : WinWindow
    {
        
        public UIWrittenanddevelopedbWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Written and developed by Nephi Self 2012 \n Version PS6";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Static";
            this.WindowTitles.Add("Written and developed by Nephi Self 2012 \n Version PS6");
            #endregion
        }
        
        #region Properties
        public WinText UIWrittenanddevelopedbText
        {
            get
            {
                if ((this.mUIWrittenanddevelopedbText == null))
                {
                    this.mUIWrittenanddevelopedbText = new WinText(this);
                    #region Search Criteria
                    this.mUIWrittenanddevelopedbText.SearchProperties[WinText.PropertyNames.Name] = "Written and developed by Nephi Self 2012  Version PS6";
                    this.mUIWrittenanddevelopedbText.WindowTitles.Add("Written and developed by Nephi Self 2012 \n Version PS6");
                    #endregion
                }
                return this.mUIWrittenanddevelopedbText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIWrittenanddevelopedbText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow3 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIOpenWindow1 mUIOpenWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITest2ssListItem UITest2ssListItem
        {
            get
            {
                if ((this.mUITest2ssListItem == null))
                {
                    this.mUITest2ssListItem = new UITest2ssListItem(this);
                }
                return this.mUITest2ssListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITest2ssListItem mUITest2ssListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITest2ssListItem : WinListItem
    {
        
        public UITest2ssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "test2.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1136";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilesoftypeComboBox
        {
            get
            {
                if ((this.mUIFilesoftypeComboBox == null))
                {
                    this.mUIFilesoftypeComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilesoftypeComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Files of type:";
                    this.mUIFilesoftypeComboBox.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilesoftypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilesoftypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICUsersNephiDocumentsWindow : WinWindow
    {
        
        public UICUsersNephiDocumentsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                "se\\test2.ss";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                    "se\\test2.ss");
            this.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                    "se\\test2.ss***");
            #endregion
        }
        
        #region Properties
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICellNameWindow1 UICellNameWindow
        {
            get
            {
                if ((this.mUICellNameWindow == null))
                {
                    this.mUICellNameWindow = new UICellNameWindow1(this);
                }
                return this.mUICellNameWindow;
            }
        }
        
        public WinTitleBar UICUsersNephiDocumentsTitleBar
        {
            get
            {
                if ((this.mUICUsersNephiDocumentsTitleBar == null))
                {
                    this.mUICUsersNephiDocumentsTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUICUsersNephiDocumentsTitleBar.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                            "se\\test2.ss***");
                    #endregion
                }
                return this.mUICUsersNephiDocumentsTitleBar;
            }
        }
        
        public UIMenuStrip1MenuBar1 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar1(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UISpreadsheetPanel1Window UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISELECTCELLTHENCLICKHWindow1 UISELECTCELLTHENCLICKHWindow
        {
            get
            {
                if ((this.mUISELECTCELLTHENCLICKHWindow == null))
                {
                    this.mUISELECTCELLTHENCLICKHWindow = new UISELECTCELLTHENCLICKHWindow1(this);
                }
                return this.mUISELECTCELLTHENCLICKHWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow4 mUIItemWindow;
        
        private UICellNameWindow1 mUICellNameWindow;
        
        private WinTitleBar mUICUsersNephiDocumentsTitleBar;
        
        private UIMenuStrip1MenuBar1 mUIMenuStrip1MenuBar;
        
        private UISpreadsheetPanel1Window mUISpreadsheetPanel1Window;
        
        private UISELECTCELLTHENCLICKHWindow1 mUISELECTCELLTHENCLICKHWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                    "se\\test2.ss");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                            "se\\test2.ss");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICellNameWindow1 : WinWindow
    {
        
        public UICellNameWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellName";
            this.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                    "se\\test2.ss***");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellNameEdit
        {
            get
            {
                if ((this.mUICellNameEdit == null))
                {
                    this.mUICellNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellNameEdit.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                            "se\\test2.ss***");
                    #endregion
                }
                return this.mUICellNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar1 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                    "se\\test2.ss***");
            this.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                    "se\\test2.ss");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                    "se\\test2.ss***");
            this.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                    "se\\test2.ss");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                            "se\\test2.ss***");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UISaveasMenuItem
        {
            get
            {
                if ((this.mUISaveasMenuItem == null))
                {
                    this.mUISaveasMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveasMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save as";
                    this.mUISaveasMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveasMenuItem.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                            "se\\test2.ss");
                    #endregion
                }
                return this.mUISaveasMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUISaveasMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetPanel1Window : WinWindow
    {
        
        public UISpreadsheetPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                    "se\\test2.ss***");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                            "se\\test2.ss***");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISELECTCELLTHENCLICKHWindow1 : WinWindow
    {
        
        public UISELECTCELLTHENCLICKHWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellContent";
            this.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                    "se\\test2.ss***");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentEdit
        {
            get
            {
                if ((this.mUICellContentEdit == null))
                {
                    this.mUICellContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Fx:";
                    this.mUICellContentEdit.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                            "se\\test2.ss***");
                    #endregion
                }
                return this.mUICellContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveTheSpreadsheetWindow : WinWindow
    {
        
        public UISaveTheSpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save The Spreadsheet";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save The Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow mUISaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save The Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save The Spreadsheet");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save The Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save The Spreadsheet");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICUsersNephiDocumentsWindow1 : WinWindow
    {
        
        public UICUsersNephiDocumentsWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                "se\\34.ss";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                    "se\\34.ss");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UICUsersNephiDocumentsTitleBar
        {
            get
            {
                if ((this.mUICUsersNephiDocumentsTitleBar == null))
                {
                    this.mUICUsersNephiDocumentsTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUICUsersNephiDocumentsTitleBar.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                            "se\\34.ss");
                    #endregion
                }
                return this.mUICUsersNephiDocumentsTitleBar;
            }
        }
        
        public UIMenuStrip1MenuBar2 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar2(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUICUsersNephiDocumentsTitleBar;
        
        private UIMenuStrip1MenuBar2 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar2 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                    "se\\34.ss");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem2 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem2(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem2 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem2 : WinMenuItem
    {
        
        public UIFileMenuItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                    "se\\34.ss");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                            "se\\34.ss");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
}
