// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadSheetTest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// VerifyTextBoxCell - Use 'VerifyTextBoxCellParams' to pass parameters into this method.
        /// </summary>
        public void VerifyTextBoxCell()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentEdit = this.UINewSheetWindow.UISELECTCELLTHENCLICKHWindow.UICellContentEdit;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Release\SpreadsheetGUI.exe'
            ApplicationUnderTest uINewSheetWindow = ApplicationUnderTest.Launch(this.VerifyTextBoxCellParams.UINewSheetWindowExePath, this.VerifyTextBoxCellParams.UINewSheetWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(78, 38));

            // Type '1' in 'cellContent' text box
            uICellContentEdit.Text = this.VerifyTextBoxCellParams.UICellContentEditText;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.VerifyTextBoxCellParams.UICellContentEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(71, 44));
        }
        
        /// <summary>
        /// AssertMethodVerifyTextBoxCell - Use 'AssertMethodVerifyTextBoxCellExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethodVerifyTextBoxCell()
        {
            #region Variable Declarations
            WinEdit uICellNameEdit = this.UINewSheetWindow.UICellNameWindow.UICellNameEdit;
            #endregion

            // Verify that 'cellName' text box's property 'Text' equals 'A1=1'
            Assert.AreEqual(this.AssertMethodVerifyTextBoxCellExpectedValues.UICellNameEditText, uICellNameEdit.Text);
        }
        
        /// <summary>
        /// OpenedFile
        /// </summary>
        public void OpenedFile()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UINewSheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            WinButton uICloseButton = this.UINewSheetWindow.UINewSheetTitleBar.UICloseButton;
            WinMenuItem uIOpenMenuItem = this.UINewSheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UITestmessListItem.UINameEdit;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            WinClient uISpreadsheetPanel1Client = this.UICUsersNephiDocumentsWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(44, 10));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(31, 10));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(45, 11));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(12, 9));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(34, 15));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(214, 101));
        }
        
        /// <summary>
        /// AssertMethodOpenfile - Use 'AssertMethodOpenfileExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethodOpenfile()
        {
            #region Variable Declarations
            WinTitleBar uICUsersNephiDocumentsTitleBar = this.UICUsersNephiDocumentsWindow.UICUsersNephiDocumentsTitleBar;
            #endregion

            // Verify that 'C:\Users\Nephi\Documents\Visual Studio 2010\Projec...' title bar's property 'DisplayText' equals 'C:\Users\Nephi\Documents\Visual Studio 2010\Projects\PS6\SpreadsheetGUI\bin\Release\test me.ss***'
            Assert.AreEqual(this.AssertMethodOpenfileExpectedValues.UICUsersNephiDocumentsTitleBarDisplayText, uICUsersNephiDocumentsTitleBar.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethodOverrite
        /// </summary>
        public void RecordedMethodOverrite()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UICUsersNephiDocumentsWindow.UICUsersNephiDocumentsTitleBar.UICloseButton;
            WinMenuItem uISaveMenuItem = this.UINewSheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinEdit uINameEdit = this.UISaveTheSpreadsheetWindow.UIItemWindow.UITestssListItem.UINameEdit;
            WinButton uISaveButton = this.UISaveTheSpreadsheetWindow.UISaveWindow.UISaveButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(21, 2));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(69, 3));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(18, 9));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(16, 11));
        }
        
        /// <summary>
        /// AssertMethodOverrite - Use 'AssertMethodOverriteExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethodOverrite()
        {
            #region Variable Declarations
            WinText uITestssalreadyexistsDText = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UITestssalreadyexistsDText;
            #endregion

            // Verify that 'test.ss already exists.Do you want to replace it?' label's property 'FriendlyName' equals 'test.ss already exists.Do you want to replace it?'
            Assert.AreEqual(this.AssertMethodOverriteExpectedValues.UITestssalreadyexistsDTextFriendlyName, uITestssalreadyexistsDText.FriendlyName);
        }
        
        /// <summary>
        /// RecordedMethodHelpMethod
        /// </summary>
        public void RecordedMethodHelpMethod()
        {
            #region Variable Declarations
            WinButton uINOButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UINOButton;
            WinCustom uIItemCustom = this.UIItemWindow.UIItemCustom;
            WinButton uICancelButton = this.UISaveTheSpreadsheetWindow.UICancelWindow.UICancelButton;
            WinMenuItem uIHowtousethisprogramMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIHelpMenuItem.UIHowtousethisprogramMenuItem;
            #endregion

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(30, 8));

            // Click 'Unknown Name' custom control
            Mouse.Click(uIItemCustom, new Point(30, 8));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(26, 14));

            // Click 'Help' -> 'How to use this program' menu item
            Mouse.Click(uIHowtousethisprogramMenuItem, new Point(72, 18));
        }
        
        /// <summary>
        /// AssertMethodHelp - Use 'AssertMethodHelpExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethodHelp()
        {
            #region Variable Declarations
            WinText uIWhenopeningthisappliText = this.UIWhenopeningthisappliWindow.UIWhenopeningthisappliText;
            #endregion

            // Verify that 'When opening this application it will be necessary...' label's property 'DisplayText' equals 'When opening this application it will be necessary to FIRST select a cell with your mouse /n Then to add a value or a formula to the selected cell click in the box marked FX.../n next press the ENTER kee to load the value into the cell permanently... or press escape if you change your mind.../nIf the boxes turn green you know the values loaded succesfully... If any of the boxes turn red there is an error message - read and fix.../nif your file is not saved you will see an asteric next to the file name... If you wish to save or open a new or preexisting file use the file menu.'
            Assert.AreEqual(this.AssertMethodHelpExpectedValues.UIWhenopeningthisappliTextDisplayText, uIWhenopeningthisappliText.DisplayText);
        }
        
        /// <summary>
        /// About
        /// </summary>
        public void About()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinButton uIItemButton = this.UIItemWindow.UIItemButton;
            WinMenuItem uIFileMenuItem = this.UIItemWindow1.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinMenuItem uIAboutMenuItem = this.UIItemWindow1.UIMenuStrip1MenuBar.UIHelpMenuItem.UIAboutMenuItem;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(37, 11));

            // Click 'Unknown Name' button
            Mouse.Click(uIItemButton, new Point(1024, 625));

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(21, 21));

            // Click 'Help' -> 'About' menu item
            Mouse.Click(uIAboutMenuItem, new Point(68, 12));
        }
        
        /// <summary>
        /// AssertAbout - Use 'AssertAboutExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertAbout()
        {
            #region Variable Declarations
            WinText uIWrittenanddevelopedbText = this.UIWrittenanddevelopedbWindow.UIWrittenanddevelopedbText;
            #endregion

            // Verify that 'Written and developed by Nephi Self 2012   Version...' label's property 'DisplayText' equals 'Written and developed by Nephi Self 2012 
            // Version PS6'
            Assert.AreEqual(this.AssertAboutExpectedValues.UIWrittenanddevelopedbTextDisplayText, uIWrittenanddevelopedbText.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethodVerifyContent - Use 'RecordedMethodVerifyContentParams' to pass parameters into this method.
        /// </summary>
        public void RecordedMethodVerifyContent()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinButton uIItemButton = this.UIItemWindow.UIItemButton;
            WinClient uISpreadsheetPanel1Client = this.UIItemWindow1.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentEdit = this.UIItemWindow1.UISELECTCELLTHENCLICKHWindow.UICellContentEdit;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(34, 4));

            // Click 'Unknown Name' button
            Mouse.Click(uIItemButton, new Point(918, 572));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(163, 99));

            // Type '=A1' in 'cellContent' text box
            uICellContentEdit.Text = this.RecordedMethodVerifyContentParams.UICellContentEditText;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.RecordedMethodVerifyContentParams.UICellContentEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(466, 99));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(137, 98));
        }
        
        /// <summary>
        /// AssertMethodContent - Use 'AssertMethodContentExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethodContent()
        {
            #region Variable Declarations
            WinEdit uICellContentEdit = this.UIItemWindow2.UISELECTCELLTHENCLICKHWindow.UICellContentEdit;
            #endregion

            // Verify that 'cellContent' text box's property 'SelectionText' equals '= A1'
            Assert.AreEqual(this.AssertMethodContentExpectedValues.UICellContentEditSelectionText, uICellContentEdit.SelectionText);
        }
        
        /// <summary>
        /// RecordedMethodPrompted
        /// </summary>
        public void RecordedMethodPrompted()
        {
            #region Variable Declarations
            WinTitleBar uIItemTitleBar = this.UIItemWindow3.UIItemTitleBar;
            WinMenuItem uICloseMenuItem = this.UIItemWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Click '***' title bar
            Mouse.Click(uIItemTitleBar, new Point(79, 7));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(67, 12));
        }
        
        /// <summary>
        /// AssertMethodPrompted - Use 'AssertMethodPromptedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethodPrompted()
        {
            #region Variable Declarations
            WinText uISaveFileBeforeCloseText = this.UIFileNotSavedWindow.UISaveFileBeforeCloseWindow.UISaveFileBeforeCloseText;
            #endregion

            // Verify that 'Save File Before Close?' label's property 'DisplayText' equals 'Save File Before Close?'
            Assert.AreEqual(this.AssertMethodPromptedExpectedValues.UISaveFileBeforeCloseTextDisplayText, uISaveFileBeforeCloseText.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod1
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinTitleBar uIFileNotSavedTitleBar = this.UIFileNotSavedWindow.UIFileNotSavedTitleBar;
            WinButton uINOButton = this.UIFileNotSavedWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'File Not Saved' title bar
            Mouse.Click(uIFileNotSavedTitleBar, new Point(190, 2));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(25, 9));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(40, 7));
        }
        
        #region Properties
        public virtual VerifyTextBoxCellParams VerifyTextBoxCellParams
        {
            get
            {
                if ((this.mVerifyTextBoxCellParams == null))
                {
                    this.mVerifyTextBoxCellParams = new VerifyTextBoxCellParams();
                }
                return this.mVerifyTextBoxCellParams;
            }
        }
        
        public virtual AssertMethodVerifyTextBoxCellExpectedValues AssertMethodVerifyTextBoxCellExpectedValues
        {
            get
            {
                if ((this.mAssertMethodVerifyTextBoxCellExpectedValues == null))
                {
                    this.mAssertMethodVerifyTextBoxCellExpectedValues = new AssertMethodVerifyTextBoxCellExpectedValues();
                }
                return this.mAssertMethodVerifyTextBoxCellExpectedValues;
            }
        }
        
        public virtual AssertMethodOpenfileExpectedValues AssertMethodOpenfileExpectedValues
        {
            get
            {
                if ((this.mAssertMethodOpenfileExpectedValues == null))
                {
                    this.mAssertMethodOpenfileExpectedValues = new AssertMethodOpenfileExpectedValues();
                }
                return this.mAssertMethodOpenfileExpectedValues;
            }
        }
        
        public virtual AssertMethodOverriteExpectedValues AssertMethodOverriteExpectedValues
        {
            get
            {
                if ((this.mAssertMethodOverriteExpectedValues == null))
                {
                    this.mAssertMethodOverriteExpectedValues = new AssertMethodOverriteExpectedValues();
                }
                return this.mAssertMethodOverriteExpectedValues;
            }
        }
        
        public virtual AssertMethodHelpExpectedValues AssertMethodHelpExpectedValues
        {
            get
            {
                if ((this.mAssertMethodHelpExpectedValues == null))
                {
                    this.mAssertMethodHelpExpectedValues = new AssertMethodHelpExpectedValues();
                }
                return this.mAssertMethodHelpExpectedValues;
            }
        }
        
        public virtual AssertAboutExpectedValues AssertAboutExpectedValues
        {
            get
            {
                if ((this.mAssertAboutExpectedValues == null))
                {
                    this.mAssertAboutExpectedValues = new AssertAboutExpectedValues();
                }
                return this.mAssertAboutExpectedValues;
            }
        }
        
        public virtual RecordedMethodVerifyContentParams RecordedMethodVerifyContentParams
        {
            get
            {
                if ((this.mRecordedMethodVerifyContentParams == null))
                {
                    this.mRecordedMethodVerifyContentParams = new RecordedMethodVerifyContentParams();
                }
                return this.mRecordedMethodVerifyContentParams;
            }
        }
        
        public virtual AssertMethodContentExpectedValues AssertMethodContentExpectedValues
        {
            get
            {
                if ((this.mAssertMethodContentExpectedValues == null))
                {
                    this.mAssertMethodContentExpectedValues = new AssertMethodContentExpectedValues();
                }
                return this.mAssertMethodContentExpectedValues;
            }
        }
        
        public virtual AssertMethodPromptedExpectedValues AssertMethodPromptedExpectedValues
        {
            get
            {
                if ((this.mAssertMethodPromptedExpectedValues == null))
                {
                    this.mAssertMethodPromptedExpectedValues = new AssertMethodPromptedExpectedValues();
                }
                return this.mAssertMethodPromptedExpectedValues;
            }
        }
        
        public UINewSheetWindow UINewSheetWindow
        {
            get
            {
                if ((this.mUINewSheetWindow == null))
                {
                    this.mUINewSheetWindow = new UINewSheetWindow();
                }
                return this.mUINewSheetWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UICUsersNephiDocumentsWindow UICUsersNephiDocumentsWindow
        {
            get
            {
                if ((this.mUICUsersNephiDocumentsWindow == null))
                {
                    this.mUICUsersNephiDocumentsWindow = new UICUsersNephiDocumentsWindow();
                }
                return this.mUICUsersNephiDocumentsWindow;
            }
        }
        
        public UISaveTheSpreadsheetWindow UISaveTheSpreadsheetWindow
        {
            get
            {
                if ((this.mUISaveTheSpreadsheetWindow == null))
                {
                    this.mUISaveTheSpreadsheetWindow = new UISaveTheSpreadsheetWindow();
                }
                return this.mUISaveTheSpreadsheetWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIForm1Window UIForm1Window
        {
            get
            {
                if ((this.mUIForm1Window == null))
                {
                    this.mUIForm1Window = new UIForm1Window();
                }
                return this.mUIForm1Window;
            }
        }
        
        public UIWhenopeningthisappliWindow UIWhenopeningthisappliWindow
        {
            get
            {
                if ((this.mUIWhenopeningthisappliWindow == null))
                {
                    this.mUIWhenopeningthisappliWindow = new UIWhenopeningthisappliWindow();
                }
                return this.mUIWhenopeningthisappliWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11();
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIWrittenanddevelopedbWindow UIWrittenanddevelopedbWindow
        {
            get
            {
                if ((this.mUIWrittenanddevelopedbWindow == null))
                {
                    this.mUIWrittenanddevelopedbWindow = new UIWrittenanddevelopedbWindow();
                }
                return this.mUIWrittenanddevelopedbWindow;
            }
        }
        
        public UIItemWindow21 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow21();
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow31 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow31();
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIFileNotSavedWindow UIFileNotSavedWindow
        {
            get
            {
                if ((this.mUIFileNotSavedWindow == null))
                {
                    this.mUIFileNotSavedWindow = new UIFileNotSavedWindow();
                }
                return this.mUIFileNotSavedWindow;
            }
        }
        #endregion
        
        #region Fields
        private VerifyTextBoxCellParams mVerifyTextBoxCellParams;
        
        private AssertMethodVerifyTextBoxCellExpectedValues mAssertMethodVerifyTextBoxCellExpectedValues;
        
        private AssertMethodOpenfileExpectedValues mAssertMethodOpenfileExpectedValues;
        
        private AssertMethodOverriteExpectedValues mAssertMethodOverriteExpectedValues;
        
        private AssertMethodHelpExpectedValues mAssertMethodHelpExpectedValues;
        
        private AssertAboutExpectedValues mAssertAboutExpectedValues;
        
        private RecordedMethodVerifyContentParams mRecordedMethodVerifyContentParams;
        
        private AssertMethodContentExpectedValues mAssertMethodContentExpectedValues;
        
        private AssertMethodPromptedExpectedValues mAssertMethodPromptedExpectedValues;
        
        private UINewSheetWindow mUINewSheetWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UICUsersNephiDocumentsWindow mUICUsersNephiDocumentsWindow;
        
        private UISaveTheSpreadsheetWindow mUISaveTheSpreadsheetWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UIItemWindow4 mUIItemWindow;
        
        private UIForm1Window mUIForm1Window;
        
        private UIWhenopeningthisappliWindow mUIWhenopeningthisappliWindow;
        
        private UIOKWindow mUIOKWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIWrittenanddevelopedbWindow mUIWrittenanddevelopedbWindow;
        
        private UIItemWindow21 mUIItemWindow2;
        
        private UIItemWindow31 mUIItemWindow3;
        
        private UIFileNotSavedWindow mUIFileNotSavedWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyTextBoxCell'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyTextBoxCellParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Release\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSheetWindowExePath = "C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
            "se\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Release\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Release\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '1' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethodVerifyTextBoxCell'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethodVerifyTextBoxCellExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'cellName' text box's property 'Text' equals 'A1=1'
        /// </summary>
        public string UICellNameEditText = "A1=1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethodOpenfile'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethodOpenfileExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'C:\Users\Nephi\Documents\Visual Studio 2010\Projec...' title bar's property 'DisplayText' equals 'C:\Users\Nephi\Documents\Visual Studio 2010\Projects\PS6\SpreadsheetGUI\bin\Release\test me.ss***'
        /// </summary>
        public string UICUsersNephiDocumentsTitleBarDisplayText = "C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
            "se\\test me.ss***";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethodOverrite'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethodOverriteExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'test.ss already exists.Do you want to replace it?' label's property 'FriendlyName' equals 'test.ss already exists.Do you want to replace it?'
        /// </summary>
        public string UITestssalreadyexistsDTextFriendlyName = "test.ss already exists.Do you want to replace it?";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethodHelp'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethodHelpExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'When opening this application it will be necessary...' label's property 'DisplayText' equals 'When opening this application it will be necessary to FIRST select a cell with your mouse /n Then to add a value or a formula to the selected cell click in the box marked FX.../n next press the ENTER kee to load the value into the cell permanently... or press escape if you change your mind.../nIf the boxes turn green you know the values loaded succesfully... If any of the boxes turn red there is an error message - read and fix.../nif your file is not saved you will see an asteric next to the file name... If you wish to save or open a new or preexisting file use the file menu.'
        /// </summary>
        public string UIWhenopeningthisappliTextDisplayText = @"When opening this application it will be necessary to FIRST select a cell with your mouse /n Then to add a value or a formula to the selected cell click in the box marked FX.../n next press the ENTER kee to load the value into the cell permanently... or press escape if you change your mind.../nIf the boxes turn green you know the values loaded succesfully... If any of the boxes turn red there is an error message - read and fix.../nif your file is not saved you will see an asteric next to the file name... If you wish to save or open a new or preexisting file use the file menu.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertAbout'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertAboutExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Written and developed by Nephi Self 2012   Version...' label's property 'DisplayText' equals 'Written and developed by Nephi Self 2012 
        /// Version PS6'
        /// </summary>
        public string UIWrittenanddevelopedbTextDisplayText = "Written and developed by Nephi Self 2012 \n Version PS6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethodVerifyContent'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethodVerifyContentParams
    {
        
        #region Fields
        /// <summary>
        /// Type '=A1' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText = "=A1";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethodContent'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethodContentExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'cellContent' text box's property 'SelectionText' equals '= A1'
        /// </summary>
        public string UICellContentEditSelectionText = "= A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethodPrompted'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethodPromptedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Save File Before Close?' label's property 'DisplayText' equals 'Save File Before Close?'
        /// </summary>
        public string UISaveFileBeforeCloseTextDisplayText = "Save File Before Close?";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINewSheetWindow : WinWindow
    {
        
        public UINewSheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "NewSheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("NewSheet");
            this.WindowTitles.Add("NewSheet***");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISELECTCELLTHENCLICKHWindow UISELECTCELLTHENCLICKHWindow
        {
            get
            {
                if ((this.mUISELECTCELLTHENCLICKHWindow == null))
                {
                    this.mUISELECTCELLTHENCLICKHWindow = new UISELECTCELLTHENCLICKHWindow(this);
                }
                return this.mUISELECTCELLTHENCLICKHWindow;
            }
        }
        
        public UICellNameWindow UICellNameWindow
        {
            get
            {
                if ((this.mUICellNameWindow == null))
                {
                    this.mUICellNameWindow = new UICellNameWindow(this);
                }
                return this.mUICellNameWindow;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UINewSheetTitleBar UINewSheetTitleBar
        {
            get
            {
                if ((this.mUINewSheetTitleBar == null))
                {
                    this.mUINewSheetTitleBar = new UINewSheetTitleBar(this);
                }
                return this.mUINewSheetTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UISELECTCELLTHENCLICKHWindow mUISELECTCELLTHENCLICKHWindow;
        
        private UICellNameWindow mUICellNameWindow;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UINewSheetTitleBar mUINewSheetTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("NewSheet");
            this.WindowTitles.Add("NewSheet***");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("NewSheet");
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("NewSheet***");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISELECTCELLTHENCLICKHWindow : WinWindow
    {
        
        public UISELECTCELLTHENCLICKHWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellContent";
            this.WindowTitles.Add("NewSheet***");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentEdit
        {
            get
            {
                if ((this.mUICellContentEdit == null))
                {
                    this.mUICellContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Fx:";
                    this.mUICellContentEdit.WindowTitles.Add("NewSheet***");
                    #endregion
                }
                return this.mUICellContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICellNameWindow : WinWindow
    {
        
        public UICellNameWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellName";
            this.WindowTitles.Add("NewSheet***");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellNameEdit
        {
            get
            {
                if ((this.mUICellNameEdit == null))
                {
                    this.mUICellNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellNameEdit.WindowTitles.Add("NewSheet***");
                    #endregion
                }
                return this.mUICellNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("NewSheet***");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("NewSheet***");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("NewSheet***");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("NewSheet***");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("NewSheet***");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUISaveMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINewSheetTitleBar : WinTitleBar
    {
        
        public UINewSheetTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("NewSheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("NewSheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITestmessListItem UITestmessListItem
        {
            get
            {
                if ((this.mUITestmessListItem == null))
                {
                    this.mUITestmessListItem = new UITestmessListItem(this);
                }
                return this.mUITestmessListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITestmessListItem mUITestmessListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITestmessListItem : WinListItem
    {
        
        public UITestmessListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "test me.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICUsersNephiDocumentsWindow : WinWindow
    {
        
        public UICUsersNephiDocumentsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                "se\\test me.ss";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                    "se\\test me.ss");
            this.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                    "se\\test me.ss***");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICUsersNephiDocumentsTitleBar UICUsersNephiDocumentsTitleBar
        {
            get
            {
                if ((this.mUICUsersNephiDocumentsTitleBar == null))
                {
                    this.mUICUsersNephiDocumentsTitleBar = new UICUsersNephiDocumentsTitleBar(this);
                }
                return this.mUICUsersNephiDocumentsTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        
        private UICUsersNephiDocumentsTitleBar mUICUsersNephiDocumentsTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                    "se\\test me.ss");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                            "se\\test me.ss");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICUsersNephiDocumentsTitleBar : WinTitleBar
    {
        
        public UICUsersNephiDocumentsTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                    "se\\test me.ss***");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                            "se\\test me.ss***");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveTheSpreadsheetWindow : WinWindow
    {
        
        public UISaveTheSpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save The Spreadsheet";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save The Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow3 mUIItemWindow;
        
        private UISaveWindow mUISaveWindow;
        
        private UICancelWindow mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save The Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UITestssListItem UITestssListItem
        {
            get
            {
                if ((this.mUITestssListItem == null))
                {
                    this.mUITestssListItem = new UITestssListItem(this);
                }
                return this.mUITestssListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITestssListItem mUITestssListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITestssListItem : WinListItem
    {
        
        public UITestssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "test.ss";
            this.WindowTitles.Add("Save The Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save The Spreadsheet");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save The Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save The Spreadsheet");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Save The Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Save The Spreadsheet");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinText UITestssalreadyexistsDText
        {
            get
            {
                if ((this.mUITestssalreadyexistsDText == null))
                {
                    this.mUITestssalreadyexistsDText = new WinText(this);
                    #region Search Criteria
                    this.mUITestssalreadyexistsDText.SearchProperties[WinText.PropertyNames.Name] = "test.ss already exists.Do you want to replace it?";
                    this.mUITestssalreadyexistsDText.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUITestssalreadyexistsDText;
            }
        }
        
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUITestssalreadyexistsDText;
        
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public WinCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new WinCustom(this);
                }
                return this.mUIItemCustom;
            }
        }
        
        public WinButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WinButton(this);
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WinCustom mUIItemCustom;
        
        private WinButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIForm1Window : WinWindow
    {
        
        public UIForm1Window()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar1 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar1(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar1 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar1 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            #endregion
        }
        
        #region Properties
        public UIHelpMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIHelpMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHelpMenuItem : WinMenuItem
    {
        
        public UIHelpMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIHowtousethisprogramMenuItem
        {
            get
            {
                if ((this.mUIHowtousethisprogramMenuItem == null))
                {
                    this.mUIHowtousethisprogramMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIHowtousethisprogramMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "How to use this program";
                    this.mUIHowtousethisprogramMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUIHowtousethisprogramMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIHowtousethisprogramMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWhenopeningthisappliWindow : WinWindow
    {
        
        public UIWhenopeningthisappliWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = @"When opening this application it will be necessary to FIRST select a cell with your mouse /n Then to add a value or a formula to the selected cell click in the box marked FX.../n next press the ENTER kee to load the value into the cell permanently... or press escape if you change your mind.../nIf the boxes turn green you know the values loaded succesfully... If any of the boxes turn red there is an error message - read and fix.../nif your file is not saved you will see an asteric next to the file name... If you wish to save or open a new or preexisting file use the file menu.";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Static";
            this.WindowTitles.Add(@"When opening this application it will be necessary to FIRST select a cell with your mouse /n Then to add a value or a formula to the selected cell click in the box marked FX.../n next press the ENTER kee to load the value into the cell permanently... or press escape if you change your mind.../nIf the boxes turn green you know the values loaded succesfully... If any of the boxes turn red there is an error message - read and fix.../nif your file is not saved you will see an asteric next to the file name... If you wish to save or open a new or preexisting file use the file menu.");
            #endregion
        }
        
        #region Properties
        public WinText UIWhenopeningthisappliText
        {
            get
            {
                if ((this.mUIWhenopeningthisappliText == null))
                {
                    this.mUIWhenopeningthisappliText = new WinText(this);
                    #region Search Criteria
                    this.mUIWhenopeningthisappliText.SearchProperties[WinText.PropertyNames.Name] = @"When opening this application it will be necessary to FIRST select a cell with your mouse /n Then to add a value or a formula to the selected cell click in the box marked FX.../n next press the ENTER kee to load the value into the cell permanently... or press escape if you change your mind.../nIf the boxes turn green you know the values loaded succesfully... If any of the boxes turn red there is an error message - read and fix.../nif your file is not saved you will see an asteric next to the file name... If you wish to save or open a new or preexisting file use the file menu.";
                    this.mUIWhenopeningthisappliText.WindowTitles.Add(@"When opening this application it will be necessary to FIRST select a cell with your mouse /n Then to add a value or a formula to the selected cell click in the box marked FX.../n next press the ENTER kee to load the value into the cell permanently... or press escape if you change your mind.../nIf the boxes turn green you know the values loaded succesfully... If any of the boxes turn red there is an error message - read and fix.../nif your file is not saved you will see an asteric next to the file name... If you wish to save or open a new or preexisting file use the file menu.");
                    #endregion
                }
                return this.mUIWhenopeningthisappliText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIWhenopeningthisappliText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "***";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("***");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar2 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar2(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIItemWindow5 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow5(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISELECTCELLTHENCLICKHWindow1 UISELECTCELLTHENCLICKHWindow
        {
            get
            {
                if ((this.mUISELECTCELLTHENCLICKHWindow == null))
                {
                    this.mUISELECTCELLTHENCLICKHWindow = new UISELECTCELLTHENCLICKHWindow1(this);
                }
                return this.mUISELECTCELLTHENCLICKHWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar2 mUIMenuStrip1MenuBar;
        
        private UIItemWindow5 mUIItemWindow;
        
        private UISELECTCELLTHENCLICKHWindow1 mUISELECTCELLTHENCLICKHWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar2 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("***");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public UIHelpMenuItem1 UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem1(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        
        private UIHelpMenuItem1 mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("***");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("***");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHelpMenuItem1 : WinMenuItem
    {
        
        public UIHelpMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("***");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIAboutMenuItem
        {
            get
            {
                if ((this.mUIAboutMenuItem == null))
                {
                    this.mUIAboutMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIAboutMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "About";
                    this.mUIAboutMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIAboutMenuItem.WindowTitles.Add("***");
                    #endregion
                }
                return this.mUIAboutMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIAboutMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("***");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("***");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISELECTCELLTHENCLICKHWindow1 : WinWindow
    {
        
        public UISELECTCELLTHENCLICKHWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellContent";
            this.WindowTitles.Add("***");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentEdit
        {
            get
            {
                if ((this.mUICellContentEdit == null))
                {
                    this.mUICellContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Fx:";
                    this.mUICellContentEdit.WindowTitles.Add("***");
                    #endregion
                }
                return this.mUICellContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWrittenanddevelopedbWindow : WinWindow
    {
        
        public UIWrittenanddevelopedbWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Written and developed by Nephi Self 2012 \n Version PS6";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Static";
            this.WindowTitles.Add("Written and developed by Nephi Self 2012 \n Version PS6");
            #endregion
        }
        
        #region Properties
        public WinText UIWrittenanddevelopedbText
        {
            get
            {
                if ((this.mUIWrittenanddevelopedbText == null))
                {
                    this.mUIWrittenanddevelopedbText = new WinText(this);
                    #region Search Criteria
                    this.mUIWrittenanddevelopedbText.SearchProperties[WinText.PropertyNames.Name] = "Written and developed by Nephi Self 2012  Version PS6";
                    this.mUIWrittenanddevelopedbText.WindowTitles.Add("Written and developed by Nephi Self 2012 \n Version PS6");
                    #endregion
                }
                return this.mUIWrittenanddevelopedbText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIWrittenanddevelopedbText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow21 : WinWindow
    {
        
        public UIItemWindow21()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "***";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("***");
            #endregion
        }
        
        #region Properties
        public UISELECTCELLTHENCLICKHWindow2 UISELECTCELLTHENCLICKHWindow
        {
            get
            {
                if ((this.mUISELECTCELLTHENCLICKHWindow == null))
                {
                    this.mUISELECTCELLTHENCLICKHWindow = new UISELECTCELLTHENCLICKHWindow2(this);
                }
                return this.mUISELECTCELLTHENCLICKHWindow;
            }
        }
        #endregion
        
        #region Fields
        private UISELECTCELLTHENCLICKHWindow2 mUISELECTCELLTHENCLICKHWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISELECTCELLTHENCLICKHWindow2 : WinWindow
    {
        
        public UISELECTCELLTHENCLICKHWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellContent";
            this.WindowTitles.Add("***");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentEdit
        {
            get
            {
                if ((this.mUICellContentEdit == null))
                {
                    this.mUICellContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Fx:";
                    this.mUICellContentEdit.WindowTitles.Add("***");
                    #endregion
                }
                return this.mUICellContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow31 : WinWindow
    {
        
        public UIItemWindow31()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "***";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("***");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIItemTitleBar
        {
            get
            {
                if ((this.mUIItemTitleBar == null))
                {
                    this.mUIItemTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIItemTitleBar.WindowTitles.Add("***");
                    #endregion
                }
                return this.mUIItemTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIItemTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileNotSavedWindow : WinWindow
    {
        
        public UIFileNotSavedWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "File Not Saved";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("File Not Saved");
            #endregion
        }
        
        #region Properties
        public UISaveFileBeforeCloseWindow UISaveFileBeforeCloseWindow
        {
            get
            {
                if ((this.mUISaveFileBeforeCloseWindow == null))
                {
                    this.mUISaveFileBeforeCloseWindow = new UISaveFileBeforeCloseWindow(this);
                }
                return this.mUISaveFileBeforeCloseWindow;
            }
        }
        
        public WinTitleBar UIFileNotSavedTitleBar
        {
            get
            {
                if ((this.mUIFileNotSavedTitleBar == null))
                {
                    this.mUIFileNotSavedTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIFileNotSavedTitleBar.WindowTitles.Add("File Not Saved");
                    #endregion
                }
                return this.mUIFileNotSavedTitleBar;
            }
        }
        
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UISaveFileBeforeCloseWindow mUISaveFileBeforeCloseWindow;
        
        private WinTitleBar mUIFileNotSavedTitleBar;
        
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveFileBeforeCloseWindow : WinWindow
    {
        
        public UISaveFileBeforeCloseWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("File Not Saved");
            #endregion
        }
        
        #region Properties
        public WinText UISaveFileBeforeCloseText
        {
            get
            {
                if ((this.mUISaveFileBeforeCloseText == null))
                {
                    this.mUISaveFileBeforeCloseText = new WinText(this);
                    #region Search Criteria
                    this.mUISaveFileBeforeCloseText.SearchProperties[WinText.PropertyNames.Name] = "Save File Before Close?";
                    this.mUISaveFileBeforeCloseText.WindowTitles.Add("File Not Saved");
                    #endregion
                }
                return this.mUISaveFileBeforeCloseText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUISaveFileBeforeCloseText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("File Not Saved");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("File Not Saved");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
}
