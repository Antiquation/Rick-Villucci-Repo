// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadSheetTest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// VerifyCellsInherit - Use 'VerifyCellsInheritParams' to pass parameters into this method.
        /// </summary>
        public void VerifyCellsInherit()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinClient uISpreadsheetPanel1Client1 = this.UINewSheetWindow.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinEdit uICellContentEdit = this.UINewSheetWindow.UISELECTCELLTHENCLICKHWindow.UICellContentEdit;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Release\SpreadsheetGUI.exe'
            ApplicationUnderTest uINewSheetWindow = ApplicationUnderTest.Launch(this.VerifyCellsInheritParams.UINewSheetWindowExePath, this.VerifyCellsInheritParams.UINewSheetWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(71, 40));

            // Type '23458970' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client1, this.VerifyCellsInheritParams.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Type '2348576' in 'cellContent' text box
            uICellContentEdit.Text = this.VerifyCellsInheritParams.UICellContentEditText;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.VerifyCellsInheritParams.UICellContentEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(161, 115));

            // Type '=A1' in 'cellContent' text box
            uICellContentEdit.Text = this.VerifyCellsInheritParams.UICellContentEditText1;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.VerifyCellsInheritParams.UICellContentEditSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertInheritance - Use 'AssertInheritanceExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertInheritance()
        {
            #region Variable Declarations
            WinEdit uICellNameEdit = this.UINewSheetWindow.UICellNameWindow.UICellNameEdit;
            #endregion

            // Verify that 'cellName' text box's property 'ControlType' equals 'Edit'
            Assert.AreEqual(this.AssertInheritanceExpectedValues.UICellNameEditControlType, uICellNameEdit.ControlType.ToString());

            // Verify that 'cellName' text box's property 'Text' equals 'B5=2348576'
            Assert.AreEqual(this.AssertInheritanceExpectedValues.UICellNameEditText, uICellNameEdit.Text);
        }
        
        /// <summary>
        /// NewWindow
        /// </summary>
        public void NewWindow()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UINewSheetWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            #endregion

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(43, 5));
        }
        
        /// <summary>
        /// AssetNewWindow - Use 'AssetNewWindowExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssetNewWindow()
        {
            #region Variable Declarations
            WinTitleBar uINewSheetTitleBar = this.UINewSheetWindow.UINewSheetTitleBar;
            #endregion

            // Verify that 'NewSheet' title bar's property 'DisplayText' equals 'NewSheet'
            Assert.AreEqual(this.AssetNewWindowExpectedValues.UINewSheetTitleBarDisplayText, uINewSheetTitleBar.DisplayText);
        }
        
        /// <summary>
        /// fileSave - Use 'fileSaveParams' to pass parameters into this method.
        /// </summary>
        public void fileSave()
        {
            #region Variable Declarations
            WinMenuItem uISaveMenuItem = this.UINewSheetWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveTheSpreadsheetWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinComboBox uISaveastypeComboBox = this.UISaveTheSpreadsheetWindow.UIDetailsPanePane.UISaveastypeComboBox;
            WinButton uISaveButton = this.UISaveTheSpreadsheetWindow.UISaveWindow.UISaveButton;
            #endregion

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(68, 18));

            // Select 'myfile' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.fileSaveParams.UIFilenameComboBoxEditableItem;

            // Select 'Spreadsheet Files (.ss)' in 'Save as type:' combo box
            uISaveastypeComboBox.SelectedItem = this.fileSaveParams.UISaveastypeComboBoxSelectedItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(39, 13));
        }
        
        /// <summary>
        /// AssertSave - Use 'AssertSaveExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertSave()
        {
            #region Variable Declarations
            WinTitleBar uINewSheetTitleBar = this.UINewSheetWindow.UINewSheetTitleBar;
            #endregion

            // Verify that 'NewSheet' title bar's property 'FriendlyName' equals 'C:\Users\Nephi\Documents\Visual Studio 2010\Projec...'
            Assert.AreEqual(this.AssertSaveExpectedValues.UINewSheetTitleBarFriendlyName, uINewSheetTitleBar.FriendlyName);
        }
        
        /// <summary>
        /// OpenFile
        /// </summary>
        public void OpenFile()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UICUsersNephiDocumentsWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UIDemossListItem.UINameEdit;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            #endregion

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(73, 4));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(12, 7));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(30, 16));
        }
        
        /// <summary>
        /// AssertOpen - Use 'AssertOpenExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertOpen()
        {
            #region Variable Declarations
            WinTitleBar uICUsersNephiDocumentsTitleBar = this.UICUsersNephiDocumentsWindow1.UICUsersNephiDocumentsTitleBar;
            #endregion

            // Verify that 'C:\Users\Nephi\Documents\Visual Studio 2010\Projec...' title bar's property 'DisplayText' equals 'C:\Users\Nephi\Documents\Visual Studio 2010\Projects\PS6\SpreadsheetGUI\bin\Release\demo.ss'
            Assert.AreEqual(this.AssertOpenExpectedValues.UICUsersNephiDocumentsTitleBarDisplayText, uICUsersNephiDocumentsTitleBar.DisplayText);
        }
        
        /// <summary>
        /// aboutBox
        /// </summary>
        public void aboutBox()
        {
            #region Variable Declarations
            WinMenuItem uIAboutMenuItem = this.UINewSheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIAboutMenuItem;
            #endregion

            // Click 'Help' -> 'About' menu item
            Mouse.Click(uIAboutMenuItem, new Point(63, 11));
        }
        
        /// <summary>
        /// AssertTextBoxAbout - Use 'AssertTextBoxAboutExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTextBoxAbout()
        {
            #region Variable Declarations
            WinText uIWrittenanddevelopedbText = this.UIWrittenanddevelopedbWindow.UIWrittenanddevelopedbText;
            #endregion

            // Verify that 'Written and developed by Nephi Self 2012   Version...' label's property 'DisplayText' equals 'Written and developed by Nephi Self 2012 
            // Version PS6'
            Assert.AreEqual(this.AssertTextBoxAboutExpectedValues.UIWrittenanddevelopedbTextDisplayText, uIWrittenanddevelopedbText.DisplayText);
        }
        
        /// <summary>
        /// testForFormulaError - Use 'testForFormulaErrorParams' to pass parameters into this method.
        /// </summary>
        public void testForFormulaError()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentEdit = this.UINewSheetWindow.UISELECTCELLTHENCLICKHWindow.UICellContentEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(853, 635));

            // Type 'HAPPY' in 'cellContent' text box
            uICellContentEdit.Text = this.testForFormulaErrorParams.UICellContentEditText;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.testForFormulaErrorParams.UICellContentEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(469, 282));

            // Type '=Z99' in 'cellContent' text box
            uICellContentEdit.Text = this.testForFormulaErrorParams.UICellContentEditText1;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.testForFormulaErrorParams.UICellContentEditSendKeys1, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertFormulaError - Use 'AssertFormulaErrorExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertFormulaError()
        {
            #region Variable Declarations
            WinEdit uICellNameEdit = this.UINewSheetWindow.UICellNameWindow.UICellNameEdit;
            #endregion

            // Verify that 'cellName' text box's property 'Text' equals 'U81=SpreadsheetUtilities.FormulaError: Exception of type 'SpreadsheetUtilities.FormulaError' was thrown.'
            Assert.AreEqual(this.AssertFormulaErrorExpectedValues.UICellNameEditText, uICellNameEdit.Text);
        }
        
        /// <summary>
        /// DivideByZero - Use 'DivideByZeroParams' to pass parameters into this method.
        /// </summary>
        public void DivideByZero()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSheetWindow2.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentEdit = this.UINewSheetWindow2.UISELECTCELLTHENCLICKHWindow.UICellContentEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(636, 33));

            // Type '1' in 'cellContent' text box
            uICellContentEdit.Text = this.DivideByZeroParams.UICellContentEditText;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.DivideByZeroParams.UICellContentEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(630, 59));

            // Type '=K1' in 'cellContent' text box
            uICellContentEdit.Text = this.DivideByZeroParams.UICellContentEditText1;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.DivideByZeroParams.UICellContentEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(611, 82));

            // Type '=K2' in 'cellContent' text box
            uICellContentEdit.Text = this.DivideByZeroParams.UICellContentEditText2;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.DivideByZeroParams.UICellContentEditSendKeys2, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(612, 100));

            // Type '=K3+K2' in 'cellContent' text box
            uICellContentEdit.Text = this.DivideByZeroParams.UICellContentEditText3;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.DivideByZeroParams.UICellContentEditSendKeys3, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(611, 118));

            // Type '=K4/0' in 'cellContent' text box
            uICellContentEdit.Text = this.DivideByZeroParams.UICellContentEditText4;

            // Type '{Enter}' in 'cellContent' text box
            Keyboard.SendKeys(uICellContentEdit, this.DivideByZeroParams.UICellContentEditSendKeys4, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertDivideByZero - Use 'AssertDivideByZeroExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertDivideByZero()
        {
            #region Variable Declarations
            WinEdit uICellNameEdit = this.UINewSheetWindow2.UICellNameWindow.UICellNameEdit;
            #endregion

            // Verify that 'cellName' text box's property 'Text' equals 'K5=SpreadsheetUtilities.FormulaError: Exception of type 'SpreadsheetUtilities.FormulaError' was thrown.'
            Assert.AreEqual(this.AssertDivideByZeroExpectedValues.UICellNameEditText, uICellNameEdit.Text);
        }
        
        /// <summary>
        /// AssertTextBoxFunctions - Use 'AssertTextBoxFunctionsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTextBoxFunctions()
        {
            #region Variable Declarations
            WinEdit uICellContentEdit = this.UINewSheetWindow2.UISELECTCELLTHENCLICKHWindow.UICellContentEdit;
            #endregion

            // Verify that 'cellContent' text box's property 'Text' equals '=K4/0'
            Assert.AreEqual(this.AssertTextBoxFunctionsExpectedValues.UICellContentEditText, uICellContentEdit.Text);
        }
        
        /// <summary>
        /// saved - Use 'savedParams' to pass parameters into this method.
        /// </summary>
        public void saved()
        {
            #region Variable Declarations
            WinMenuItem uIFileMenuItem = this.UINewSheetWindow2.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinMenuItem uISaveasMenuItem = this.UINewSheetWindow2.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveasMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveTheSpreadsheetWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveTheSpreadsheetWindow.UISaveWindow.UISaveButton;
            #endregion

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(29, 27));

            // Click 'File' -> 'Save as' menu item
            Mouse.Click(uISaveasMenuItem, new Point(61, 16));

            // Select 'thisFileRocks' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.savedParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(54, 9));
        }
        
        /// <summary>
        /// savedWorked - Use 'savedWorkedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void savedWorked()
        {
            #region Variable Declarations
            WinTitleBar uICUsersNephiDocumentsTitleBar = this.UINewSheetWindow2.UICUsersNephiDocumentsTitleBar;
            #endregion

            // Verify that 'C:\Users\Nephi\Documents\Visual Studio 2010\Projec...' title bar's property 'DisplayText' equals 'C:\Users\Nephi\Documents\Visual Studio 2010\Projects\PS6\SpreadsheetGUI\bin\Release\thisFileRocks.ss'
            Assert.AreEqual(this.savedWorkedExpectedValues.UICUsersNephiDocumentsTitleBarDisplayText, uICUsersNephiDocumentsTitleBar.DisplayText);
        }
        
        /// <summary>
        /// VerifyPrompt
        /// </summary>
        public void VerifyPrompt()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UINewSheetWindow2.UIItemWindow.UISpreadsheetPanel1Client;
            WinMenuItem uICloseMenuItem = this.UINewSheetWindow2.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(399, 304));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(51, 15));
        }
        
        /// <summary>
        /// VerifyAsterics - Use 'VerifyAstericsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyAsterics()
        {
            #region Variable Declarations
            WinTitleBar uICUsersNephiDocumentsTitleBar = this.UINewSheetWindow2.UICUsersNephiDocumentsTitleBar;
            #endregion

            // Verify that 'C:\Users\Nephi\Documents\Visual Studio 2010\Projec...' title bar's property 'DisplayText' equals 'C:\Users\Nephi\Documents\Visual Studio 2010\Projects\PS6\SpreadsheetGUI\bin\Release\thisFileRocks.ss***'
            Assert.AreEqual(this.VerifyAstericsExpectedValues.UICUsersNephiDocumentsTitleBarDisplayText, uICUsersNephiDocumentsTitleBar.DisplayText);
        }
        
        /// <summary>
        /// VerifyWindow - Use 'VerifyWindowExpectedValues' to pass parameters into this method.
        /// </summary>
        public void VerifyWindow()
        {
            #region Variable Declarations
            WinTitleBar uIFileNotSavedTitleBar = this.UIFileNotSavedWindow.UIFileNotSavedTitleBar;
            #endregion

            // Verify that 'File Not Saved' title bar's property 'DisplayText' equals 'File Not Saved'
            Assert.AreEqual(this.VerifyWindowExpectedValues.UIFileNotSavedTitleBarDisplayText, uIFileNotSavedTitleBar.DisplayText);
        }
        
        #region Properties
        public virtual VerifyCellsInheritParams VerifyCellsInheritParams
        {
            get
            {
                if ((this.mVerifyCellsInheritParams == null))
                {
                    this.mVerifyCellsInheritParams = new VerifyCellsInheritParams();
                }
                return this.mVerifyCellsInheritParams;
            }
        }
        
        public virtual AssertInheritanceExpectedValues AssertInheritanceExpectedValues
        {
            get
            {
                if ((this.mAssertInheritanceExpectedValues == null))
                {
                    this.mAssertInheritanceExpectedValues = new AssertInheritanceExpectedValues();
                }
                return this.mAssertInheritanceExpectedValues;
            }
        }
        
        public virtual AssetNewWindowExpectedValues AssetNewWindowExpectedValues
        {
            get
            {
                if ((this.mAssetNewWindowExpectedValues == null))
                {
                    this.mAssetNewWindowExpectedValues = new AssetNewWindowExpectedValues();
                }
                return this.mAssetNewWindowExpectedValues;
            }
        }
        
        public virtual fileSaveParams fileSaveParams
        {
            get
            {
                if ((this.mfileSaveParams == null))
                {
                    this.mfileSaveParams = new fileSaveParams();
                }
                return this.mfileSaveParams;
            }
        }
        
        public virtual AssertSaveExpectedValues AssertSaveExpectedValues
        {
            get
            {
                if ((this.mAssertSaveExpectedValues == null))
                {
                    this.mAssertSaveExpectedValues = new AssertSaveExpectedValues();
                }
                return this.mAssertSaveExpectedValues;
            }
        }
        
        public virtual AssertOpenExpectedValues AssertOpenExpectedValues
        {
            get
            {
                if ((this.mAssertOpenExpectedValues == null))
                {
                    this.mAssertOpenExpectedValues = new AssertOpenExpectedValues();
                }
                return this.mAssertOpenExpectedValues;
            }
        }
        
        public virtual AssertTextBoxAboutExpectedValues AssertTextBoxAboutExpectedValues
        {
            get
            {
                if ((this.mAssertTextBoxAboutExpectedValues == null))
                {
                    this.mAssertTextBoxAboutExpectedValues = new AssertTextBoxAboutExpectedValues();
                }
                return this.mAssertTextBoxAboutExpectedValues;
            }
        }
        
        public virtual testForFormulaErrorParams testForFormulaErrorParams
        {
            get
            {
                if ((this.mtestForFormulaErrorParams == null))
                {
                    this.mtestForFormulaErrorParams = new testForFormulaErrorParams();
                }
                return this.mtestForFormulaErrorParams;
            }
        }
        
        public virtual AssertFormulaErrorExpectedValues AssertFormulaErrorExpectedValues
        {
            get
            {
                if ((this.mAssertFormulaErrorExpectedValues == null))
                {
                    this.mAssertFormulaErrorExpectedValues = new AssertFormulaErrorExpectedValues();
                }
                return this.mAssertFormulaErrorExpectedValues;
            }
        }
        
        public virtual DivideByZeroParams DivideByZeroParams
        {
            get
            {
                if ((this.mDivideByZeroParams == null))
                {
                    this.mDivideByZeroParams = new DivideByZeroParams();
                }
                return this.mDivideByZeroParams;
            }
        }
        
        public virtual AssertDivideByZeroExpectedValues AssertDivideByZeroExpectedValues
        {
            get
            {
                if ((this.mAssertDivideByZeroExpectedValues == null))
                {
                    this.mAssertDivideByZeroExpectedValues = new AssertDivideByZeroExpectedValues();
                }
                return this.mAssertDivideByZeroExpectedValues;
            }
        }
        
        public virtual AssertTextBoxFunctionsExpectedValues AssertTextBoxFunctionsExpectedValues
        {
            get
            {
                if ((this.mAssertTextBoxFunctionsExpectedValues == null))
                {
                    this.mAssertTextBoxFunctionsExpectedValues = new AssertTextBoxFunctionsExpectedValues();
                }
                return this.mAssertTextBoxFunctionsExpectedValues;
            }
        }
        
        public virtual savedParams savedParams
        {
            get
            {
                if ((this.msavedParams == null))
                {
                    this.msavedParams = new savedParams();
                }
                return this.msavedParams;
            }
        }
        
        public virtual savedWorkedExpectedValues savedWorkedExpectedValues
        {
            get
            {
                if ((this.msavedWorkedExpectedValues == null))
                {
                    this.msavedWorkedExpectedValues = new savedWorkedExpectedValues();
                }
                return this.msavedWorkedExpectedValues;
            }
        }
        
        public virtual VerifyAstericsExpectedValues VerifyAstericsExpectedValues
        {
            get
            {
                if ((this.mVerifyAstericsExpectedValues == null))
                {
                    this.mVerifyAstericsExpectedValues = new VerifyAstericsExpectedValues();
                }
                return this.mVerifyAstericsExpectedValues;
            }
        }
        
        public virtual VerifyWindowExpectedValues VerifyWindowExpectedValues
        {
            get
            {
                if ((this.mVerifyWindowExpectedValues == null))
                {
                    this.mVerifyWindowExpectedValues = new VerifyWindowExpectedValues();
                }
                return this.mVerifyWindowExpectedValues;
            }
        }
        
        public UINewSheetWindow UINewSheetWindow
        {
            get
            {
                if ((this.mUINewSheetWindow == null))
                {
                    this.mUINewSheetWindow = new UINewSheetWindow();
                }
                return this.mUINewSheetWindow;
            }
        }
        
        public UINewSheetWindow1 UINewSheetWindow1
        {
            get
            {
                if ((this.mUINewSheetWindow1 == null))
                {
                    this.mUINewSheetWindow1 = new UINewSheetWindow1();
                }
                return this.mUINewSheetWindow1;
            }
        }
        
        public UISaveTheSpreadsheetWindow UISaveTheSpreadsheetWindow
        {
            get
            {
                if ((this.mUISaveTheSpreadsheetWindow == null))
                {
                    this.mUISaveTheSpreadsheetWindow = new UISaveTheSpreadsheetWindow();
                }
                return this.mUISaveTheSpreadsheetWindow;
            }
        }
        
        public UICUsersNephiDocumentsWindow UICUsersNephiDocumentsWindow
        {
            get
            {
                if ((this.mUICUsersNephiDocumentsWindow == null))
                {
                    this.mUICUsersNephiDocumentsWindow = new UICUsersNephiDocumentsWindow();
                }
                return this.mUICUsersNephiDocumentsWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UICUsersNephiDocumentsWindow1 UICUsersNephiDocumentsWindow1
        {
            get
            {
                if ((this.mUICUsersNephiDocumentsWindow1 == null))
                {
                    this.mUICUsersNephiDocumentsWindow1 = new UICUsersNephiDocumentsWindow1();
                }
                return this.mUICUsersNephiDocumentsWindow1;
            }
        }
        
        public UIWrittenanddevelopedbWindow UIWrittenanddevelopedbWindow
        {
            get
            {
                if ((this.mUIWrittenanddevelopedbWindow == null))
                {
                    this.mUIWrittenanddevelopedbWindow = new UIWrittenanddevelopedbWindow();
                }
                return this.mUIWrittenanddevelopedbWindow;
            }
        }
        
        public UINewSheetWindow2 UINewSheetWindow2
        {
            get
            {
                if ((this.mUINewSheetWindow2 == null))
                {
                    this.mUINewSheetWindow2 = new UINewSheetWindow2();
                }
                return this.mUINewSheetWindow2;
            }
        }
        
        public UIFileNotSavedWindow UIFileNotSavedWindow
        {
            get
            {
                if ((this.mUIFileNotSavedWindow == null))
                {
                    this.mUIFileNotSavedWindow = new UIFileNotSavedWindow();
                }
                return this.mUIFileNotSavedWindow;
            }
        }
        #endregion
        
        #region Fields
        private VerifyCellsInheritParams mVerifyCellsInheritParams;
        
        private AssertInheritanceExpectedValues mAssertInheritanceExpectedValues;
        
        private AssetNewWindowExpectedValues mAssetNewWindowExpectedValues;
        
        private fileSaveParams mfileSaveParams;
        
        private AssertSaveExpectedValues mAssertSaveExpectedValues;
        
        private AssertOpenExpectedValues mAssertOpenExpectedValues;
        
        private AssertTextBoxAboutExpectedValues mAssertTextBoxAboutExpectedValues;
        
        private testForFormulaErrorParams mtestForFormulaErrorParams;
        
        private AssertFormulaErrorExpectedValues mAssertFormulaErrorExpectedValues;
        
        private DivideByZeroParams mDivideByZeroParams;
        
        private AssertDivideByZeroExpectedValues mAssertDivideByZeroExpectedValues;
        
        private AssertTextBoxFunctionsExpectedValues mAssertTextBoxFunctionsExpectedValues;
        
        private savedParams msavedParams;
        
        private savedWorkedExpectedValues msavedWorkedExpectedValues;
        
        private VerifyAstericsExpectedValues mVerifyAstericsExpectedValues;
        
        private VerifyWindowExpectedValues mVerifyWindowExpectedValues;
        
        private UINewSheetWindow mUINewSheetWindow;
        
        private UINewSheetWindow1 mUINewSheetWindow1;
        
        private UISaveTheSpreadsheetWindow mUISaveTheSpreadsheetWindow;
        
        private UICUsersNephiDocumentsWindow mUICUsersNephiDocumentsWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UICUsersNephiDocumentsWindow1 mUICUsersNephiDocumentsWindow1;
        
        private UIWrittenanddevelopedbWindow mUIWrittenanddevelopedbWindow;
        
        private UINewSheetWindow2 mUINewSheetWindow2;
        
        private UIFileNotSavedWindow mUIFileNotSavedWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyCellsInherit'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyCellsInheritParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Release\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSheetWindowExePath = "C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
            "se\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Release\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Release\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '23458970' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "23458970";
        
        /// <summary>
        /// Type '2348576' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText = "2348576";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=A1' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText1 = "=A1";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertInheritance'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertInheritanceExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'cellName' text box's property 'ControlType' equals 'Edit'
        /// </summary>
        public string UICellNameEditControlType = "Edit";
        
        /// <summary>
        /// Verify that 'cellName' text box's property 'Text' equals 'B5=2348576'
        /// </summary>
        public string UICellNameEditText = "B5=2348576";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssetNewWindow'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssetNewWindowExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'NewSheet' title bar's property 'DisplayText' equals 'NewSheet'
        /// </summary>
        public string UINewSheetTitleBarDisplayText = "NewSheet";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'fileSave'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class fileSaveParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'myfile' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "myfile";
        
        /// <summary>
        /// Select 'Spreadsheet Files (.ss)' in 'Save as type:' combo box
        /// </summary>
        public string UISaveastypeComboBoxSelectedItem = "Spreadsheet Files (.ss)";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSave'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertSaveExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'NewSheet' title bar's property 'FriendlyName' equals 'C:\Users\Nephi\Documents\Visual Studio 2010\Projec...'
        /// </summary>
        public string UINewSheetTitleBarFriendlyName = "C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projec...";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertOpen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertOpenExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'C:\Users\Nephi\Documents\Visual Studio 2010\Projec...' title bar's property 'DisplayText' equals 'C:\Users\Nephi\Documents\Visual Studio 2010\Projects\PS6\SpreadsheetGUI\bin\Release\demo.ss'
        /// </summary>
        public string UICUsersNephiDocumentsTitleBarDisplayText = "C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
            "se\\demo.ss";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTextBoxAbout'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertTextBoxAboutExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Written and developed by Nephi Self 2012   Version...' label's property 'DisplayText' equals 'Written and developed by Nephi Self 2012 
        /// Version PS6'
        /// </summary>
        public string UIWrittenanddevelopedbTextDisplayText = "Written and developed by Nephi Self 2012 \n Version PS6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'testForFormulaError'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class testForFormulaErrorParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'HAPPY' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText = "HAPPY";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=Z99' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText1 = "=Z99";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertFormulaError'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertFormulaErrorExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'cellName' text box's property 'Text' equals 'U81=SpreadsheetUtilities.FormulaError: Exception of type 'SpreadsheetUtilities.FormulaError' was thrown.'
        /// </summary>
        public string UICellNameEditText = "U81=SpreadsheetUtilities.FormulaError: Exception of type \'SpreadsheetUtilities.Fo" +
            "rmulaError\' was thrown.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'DivideByZero'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class DivideByZeroParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=K1' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText1 = "=K1";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=K2' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText2 = "=K2";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '=K3+K2' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText3 = "=K3+K2";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '=K4/0' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditText4 = "=K4/0";
        
        /// <summary>
        /// Type '{Enter}' in 'cellContent' text box
        /// </summary>
        public string UICellContentEditSendKeys4 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertDivideByZero'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertDivideByZeroExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'cellName' text box's property 'Text' equals 'K5=SpreadsheetUtilities.FormulaError: Exception of type 'SpreadsheetUtilities.FormulaError' was thrown.'
        /// </summary>
        public string UICellNameEditText = "K5=SpreadsheetUtilities.FormulaError: Exception of type \'SpreadsheetUtilities.For" +
            "mulaError\' was thrown.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTextBoxFunctions'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertTextBoxFunctionsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'cellContent' text box's property 'Text' equals '=K4/0'
        /// </summary>
        public string UICellContentEditText = "=K4/0";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'saved'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class savedParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'thisFileRocks' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "thisFileRocks";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'savedWorked'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class savedWorkedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'C:\Users\Nephi\Documents\Visual Studio 2010\Projec...' title bar's property 'DisplayText' equals 'C:\Users\Nephi\Documents\Visual Studio 2010\Projects\PS6\SpreadsheetGUI\bin\Release\thisFileRocks.ss'
        /// </summary>
        public string UICUsersNephiDocumentsTitleBarDisplayText = "C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
            "se\\thisFileRocks.ss";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyAsterics'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyAstericsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'C:\Users\Nephi\Documents\Visual Studio 2010\Projec...' title bar's property 'DisplayText' equals 'C:\Users\Nephi\Documents\Visual Studio 2010\Projects\PS6\SpreadsheetGUI\bin\Release\thisFileRocks.ss***'
        /// </summary>
        public string UICUsersNephiDocumentsTitleBarDisplayText = "C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
            "se\\thisFileRocks.ss***";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'VerifyWindow'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class VerifyWindowExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'File Not Saved' title bar's property 'DisplayText' equals 'File Not Saved'
        /// </summary>
        public string UIFileNotSavedTitleBarDisplayText = "File Not Saved";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINewSheetWindow : WinWindow
    {
        
        public UINewSheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "NewSheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("NewSheet");
            this.WindowTitles.Add("NewSheet***");
            this.WindowTitles.Add("NewSheet******");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISpreadsheetPanel1Window UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISELECTCELLTHENCLICKHWindow UISELECTCELLTHENCLICKHWindow
        {
            get
            {
                if ((this.mUISELECTCELLTHENCLICKHWindow == null))
                {
                    this.mUISELECTCELLTHENCLICKHWindow = new UISELECTCELLTHENCLICKHWindow(this);
                }
                return this.mUISELECTCELLTHENCLICKHWindow;
            }
        }
        
        public UICellNameWindow UICellNameWindow
        {
            get
            {
                if ((this.mUICellNameWindow == null))
                {
                    this.mUICellNameWindow = new UICellNameWindow(this);
                }
                return this.mUICellNameWindow;
            }
        }
        
        public WinTitleBar UINewSheetTitleBar
        {
            get
            {
                if ((this.mUINewSheetTitleBar == null))
                {
                    this.mUINewSheetTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUINewSheetTitleBar.WindowTitles.Add("NewSheet");
                    #endregion
                }
                return this.mUINewSheetTitleBar;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UISpreadsheetPanel1Window mUISpreadsheetPanel1Window;
        
        private UISELECTCELLTHENCLICKHWindow mUISELECTCELLTHENCLICKHWindow;
        
        private UICellNameWindow mUICellNameWindow;
        
        private WinTitleBar mUINewSheetTitleBar;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("NewSheet");
            this.WindowTitles.Add("NewSheet***");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("NewSheet");
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("NewSheet***");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetPanel1Window : WinWindow
    {
        
        public UISpreadsheetPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("NewSheet***");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("NewSheet***");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISELECTCELLTHENCLICKHWindow : WinWindow
    {
        
        public UISELECTCELLTHENCLICKHWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellContent";
            this.WindowTitles.Add("NewSheet***");
            this.WindowTitles.Add("NewSheet******");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentEdit
        {
            get
            {
                if ((this.mUICellContentEdit == null))
                {
                    this.mUICellContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Fx:";
                    this.mUICellContentEdit.WindowTitles.Add("NewSheet***");
                    this.mUICellContentEdit.WindowTitles.Add("NewSheet******");
                    #endregion
                }
                return this.mUICellContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICellNameWindow : WinWindow
    {
        
        public UICellNameWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellName";
            this.WindowTitles.Add("NewSheet******");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellNameEdit
        {
            get
            {
                if ((this.mUICellNameEdit == null))
                {
                    this.mUICellNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellNameEdit.WindowTitles.Add("NewSheet******");
                    #endregion
                }
                return this.mUICellNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("NewSheet");
            #endregion
        }
        
        #region Properties
        public UIHelpMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIHelpMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHelpMenuItem : WinMenuItem
    {
        
        public UIHelpMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("NewSheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIAboutMenuItem
        {
            get
            {
                if ((this.mUIAboutMenuItem == null))
                {
                    this.mUIAboutMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIAboutMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "About";
                    this.mUIAboutMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIAboutMenuItem.WindowTitles.Add("NewSheet");
                    #endregion
                }
                return this.mUIAboutMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIAboutMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINewSheetWindow1 : WinWindow
    {
        
        public UINewSheetWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "NewSheet*********";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("NewSheet*********");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar1 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar1(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar1 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar1 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("NewSheet*********");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("NewSheet*********");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("NewSheet*********");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("NewSheet*********");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUISaveMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveTheSpreadsheetWindow : WinWindow
    {
        
        public UISaveTheSpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save The Spreadsheet";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save The Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow mUISaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save The Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save The Spreadsheet");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        
        public WinComboBox UISaveastypeComboBox
        {
            get
            {
                if ((this.mUISaveastypeComboBox == null))
                {
                    this.mUISaveastypeComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUISaveastypeComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Save as type:";
                    this.mUISaveastypeComboBox.WindowTitles.Add("Save The Spreadsheet");
                    #endregion
                }
                return this.mUISaveastypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        
        private WinComboBox mUISaveastypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save The Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save The Spreadsheet");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICUsersNephiDocumentsWindow : WinWindow
    {
        
        public UICUsersNephiDocumentsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                "se\\myfile.ss";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                    "se\\myfile.ss");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar2 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar2(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar2 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar2 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                    "se\\myfile.ss");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                    "se\\myfile.ss");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                            "se\\myfile.ss");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIDemossListItem UIDemossListItem
        {
            get
            {
                if ((this.mUIDemossListItem == null))
                {
                    this.mUIDemossListItem = new UIDemossListItem(this);
                }
                return this.mUIDemossListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDemossListItem mUIDemossListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDemossListItem : WinListItem
    {
        
        public UIDemossListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "demo.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICUsersNephiDocumentsWindow1 : WinWindow
    {
        
        public UICUsersNephiDocumentsWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                "se\\demo.ss";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                    "se\\demo.ss");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UICUsersNephiDocumentsTitleBar
        {
            get
            {
                if ((this.mUICUsersNephiDocumentsTitleBar == null))
                {
                    this.mUICUsersNephiDocumentsTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUICUsersNephiDocumentsTitleBar.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                            "se\\demo.ss");
                    #endregion
                }
                return this.mUICUsersNephiDocumentsTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUICUsersNephiDocumentsTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWrittenanddevelopedbWindow : WinWindow
    {
        
        public UIWrittenanddevelopedbWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Written and developed by Nephi Self 2012 \n Version PS6";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Static";
            this.WindowTitles.Add("Written and developed by Nephi Self 2012 \n Version PS6");
            #endregion
        }
        
        #region Properties
        public WinText UIWrittenanddevelopedbText
        {
            get
            {
                if ((this.mUIWrittenanddevelopedbText == null))
                {
                    this.mUIWrittenanddevelopedbText = new WinText(this);
                    #region Search Criteria
                    this.mUIWrittenanddevelopedbText.SearchProperties[WinText.PropertyNames.Name] = "Written and developed by Nephi Self 2012  Version PS6";
                    this.mUIWrittenanddevelopedbText.WindowTitles.Add("Written and developed by Nephi Self 2012 \n Version PS6");
                    #endregion
                }
                return this.mUIWrittenanddevelopedbText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIWrittenanddevelopedbText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINewSheetWindow2 : WinWindow
    {
        
        public UINewSheetWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "NewSheet***************************************************";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("NewSheet***************************************************");
            this.WindowTitles.Add("NewSheet******************************************************");
            this.WindowTitles.Add("NewSheet*********************************************************");
            this.WindowTitles.Add("NewSheet************************************************************");
            this.WindowTitles.Add("NewSheet***************************************************************");
            this.WindowTitles.Add("NewSheet******************************************************************");
            this.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                    "se\\thisFileRocks.ss");
            this.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                    "se\\thisFileRocks.ss***");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISELECTCELLTHENCLICKHWindow1 UISELECTCELLTHENCLICKHWindow
        {
            get
            {
                if ((this.mUISELECTCELLTHENCLICKHWindow == null))
                {
                    this.mUISELECTCELLTHENCLICKHWindow = new UISELECTCELLTHENCLICKHWindow1(this);
                }
                return this.mUISELECTCELLTHENCLICKHWindow;
            }
        }
        
        public UICellNameWindow1 UICellNameWindow
        {
            get
            {
                if ((this.mUICellNameWindow == null))
                {
                    this.mUICellNameWindow = new UICellNameWindow1(this);
                }
                return this.mUICellNameWindow;
            }
        }
        
        public UIMenuStrip1MenuBar3 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar3(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public WinTitleBar UICUsersNephiDocumentsTitleBar
        {
            get
            {
                if ((this.mUICUsersNephiDocumentsTitleBar == null))
                {
                    this.mUICUsersNephiDocumentsTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUICUsersNephiDocumentsTitleBar.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                            "se\\thisFileRocks.ss");
                    #endregion
                }
                return this.mUICUsersNephiDocumentsTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        
        private UISELECTCELLTHENCLICKHWindow1 mUISELECTCELLTHENCLICKHWindow;
        
        private UICellNameWindow1 mUICellNameWindow;
        
        private UIMenuStrip1MenuBar3 mUIMenuStrip1MenuBar;
        
        private WinTitleBar mUICUsersNephiDocumentsTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("NewSheet***************************************************");
            this.WindowTitles.Add("NewSheet******************************************************");
            this.WindowTitles.Add("NewSheet*********************************************************");
            this.WindowTitles.Add("NewSheet************************************************************");
            this.WindowTitles.Add("NewSheet***************************************************************");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("NewSheet***************************************************");
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("NewSheet******************************************************");
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("NewSheet*********************************************************");
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("NewSheet************************************************************");
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("NewSheet***************************************************************");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISELECTCELLTHENCLICKHWindow1 : WinWindow
    {
        
        public UISELECTCELLTHENCLICKHWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellContent";
            this.WindowTitles.Add("NewSheet******************************************************");
            this.WindowTitles.Add("NewSheet*********************************************************");
            this.WindowTitles.Add("NewSheet************************************************************");
            this.WindowTitles.Add("NewSheet***************************************************************");
            this.WindowTitles.Add("NewSheet******************************************************************");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentEdit
        {
            get
            {
                if ((this.mUICellContentEdit == null))
                {
                    this.mUICellContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Fx:";
                    this.mUICellContentEdit.WindowTitles.Add("NewSheet******************************************************");
                    this.mUICellContentEdit.WindowTitles.Add("NewSheet*********************************************************");
                    this.mUICellContentEdit.WindowTitles.Add("NewSheet************************************************************");
                    this.mUICellContentEdit.WindowTitles.Add("NewSheet***************************************************************");
                    this.mUICellContentEdit.WindowTitles.Add("NewSheet******************************************************************");
                    #endregion
                }
                return this.mUICellContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICellNameWindow1 : WinWindow
    {
        
        public UICellNameWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cellName";
            this.WindowTitles.Add("NewSheet******************************************************************");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellNameEdit
        {
            get
            {
                if ((this.mUICellNameEdit == null))
                {
                    this.mUICellNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellNameEdit.WindowTitles.Add("NewSheet******************************************************************");
                    #endregion
                }
                return this.mUICellNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar3 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("NewSheet******************************************************************");
            this.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                    "se\\thisFileRocks.ss***");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem2 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem2(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem2 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem2 : WinMenuItem
    {
        
        public UIFileMenuItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("NewSheet******************************************************************");
            this.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                    "se\\thisFileRocks.ss***");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveasMenuItem
        {
            get
            {
                if ((this.mUISaveasMenuItem == null))
                {
                    this.mUISaveasMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveasMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save as";
                    this.mUISaveasMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveasMenuItem.WindowTitles.Add("NewSheet******************************************************************");
                    #endregion
                }
                return this.mUISaveasMenuItem;
            }
        }
        
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("C:\\Users\\Nephi\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Relea" +
                            "se\\thisFileRocks.ss***");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveasMenuItem;
        
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileNotSavedWindow : WinWindow
    {
        
        public UIFileNotSavedWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "File Not Saved";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("File Not Saved");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIFileNotSavedTitleBar
        {
            get
            {
                if ((this.mUIFileNotSavedTitleBar == null))
                {
                    this.mUIFileNotSavedTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIFileNotSavedTitleBar.WindowTitles.Add("File Not Saved");
                    #endregion
                }
                return this.mUIFileNotSavedTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIFileNotSavedTitleBar;
        #endregion
    }
}
