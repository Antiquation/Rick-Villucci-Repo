using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SpreadsheetUtilities;


namespace SS
{
    class Spreadsheet : AbstractSpreadsheet
    {

        //the collection of non duplicate cells located in the sheet
        Dictionary<string, Cell> sheet;

            //represents all the cells that need to be recalculated
        List<Cell> recalc;

            //the Dependency graph for the spreadSheet
        DependencyGraph DG;




            /// <summary>
            /// Zero argument constructor which allows the creation of 
            /// an AbstractSpreadsheet object. When a cell is visited it is instantiated with either
            /// a default (name + empty content) or if content is specified (name + valid content)
            /// it is then added to the Hashset.
            /// </summary>
        public Spreadsheet()
        {
                //the collection of non duplicate cells located in the sheet
            sheet = new Dictionary<string, Cell>();

                //creates the dependency graph associaed with the SpreadSheet
            DG = new DependencyGraph();
           

        }





        public override IEnumerable<string> GetNamesOfAllNonemptyCells()
        {
            throw new NotImplementedException();
        }

        public override object GetCellContents(string name)
        {
            throw new NotImplementedException();

           // int index = sheet.GetHashCode(name);
            //return sheet.ElementAt(sheet.GetHashCode(name));
        }

        public override ISet<string> SetCellContents(string name, double number)
        {
            //NEED TO IMPLIMENT THE ERROR
            //throw new NotImplementedException();

            sheet.Add(name, new Cell(name, number));

        }

        public override ISet<string> SetCellContents(string name, string text)
        {
            //throw new NotImplementedException();

            sheet.Add(name, new Cell(name, text));
        }

        public override ISet<string> SetCellContents(string name, Formula formula)
        {
            //throw new NotImplementedException();

            if (formula == null)
                throw new ArgumentException("The formula is nn existent");

            if (name == null)
                throw new InvalidNameException();

            


            foreach(string s in formula.GetVariables())
            {
                    //creates all the dependents for the Cell "name" passed into SetCellContents() 
                DG.AddDependency(name, s);
            }
                //adds the name and the new cell object containing the cell contents and its name to the sheet
            sheet.Add(name, new Cell(name, formula));

            return new ISet<string> (DG.GetDependents(name));
        }

        protected override IEnumerable<string> GetDirectDependents(string name)
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// Helper Method...
        /// Given a cells name - this method will determine if it had an illegal
        /// circular dependency and returns true if circular and false if not.
        /// </summary>
        /// <param name="cellName">string</param>
        /// <returns>boolean</returns>
        private bool circular(string cellName)
        {
                //gets all the cells dependents and if 
                //the cell name appears in that iteration 
                //then the cell had circular dependency - return true
            foreach (string s in DG.GetDependents(cellName))
            {
                if (s == cellName)
                {
                    return true;
                }

            }
                //Cell is legal - return false
            return false;
        }


    }//end Spreadsheed class




}
