// Skeleton implementation written by Joe Zachary for CS 3500, September 2012.
// Version 1.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace SpreadsheetUtilities
{

    /// <summary>
    /// A DependencyGraph can be modeled as a set of ordered pairs of strings.  Two ordered pairs
    /// (s1,t1) and (s2,t2) are considered equal if and only if s1 equals s2 and t1 equals t2.
    /// (Recall that sets never contain duplicates.  If an attempt is made to add an element to a 
    /// set, and the element is already in the set, the set remains unchanged.)
    /// 
    /// Given a DependencyGraph DG:
    /// 
    ///    (1) If s is a string, the set of all strings t such that (s,t) is in DG is called dependents(s).
    ///        
    ///    (2) If s is a string, the set of all strings t such that (t,s) is in DG is called dependees(s).
    //
    // For example, suppose DG = {("a", "b"), ("a", "c"), ("b", "d"), ("d", "d")}
    //     dependents("a") = {"b", "c"}
    //     dependents("b") = {"d"}
    //     dependents("c") = {}
    //     dependents("d") = {"d"}
    //     dependees("a") = {}
    //     dependees("b") = {"a"}
    //     dependees("c") = {"a"}
    //     dependees("d") = {"b", "d"}
    /// </summary>
    public class DependencyGraph
    {
        //publicly accessible Dependency graph
        HashSet<KeyValuePair<string, string>> DG;

        

        /// <summary>
        /// Creates an empty DependencyGraph.
        /// </summary>
        public DependencyGraph()
        {
            

            //The blank dependency graph in the form of a hashset
            DG = new HashSet<KeyValuePair<string, string>>();
            
           
        }


        /// <summary>
        /// The number of ordered pairs in the DependencyGraph.
        /// </summary>
        public int Size
        {
           
            
            get { return DG.Count; }
        }


        /// <summary>
        /// The size of dependees(s).
        /// This property is an example of an indexer.  If dg is a DependencyGraph, you would
        /// invoke it like this:
        /// dg["a"]
        /// It should return the size of dependees("a")
        /// </summary>
        public int this[string s]
        {
           
            get {
                int i = 0;
                    //takes each value pair in DG and checks if s matches the key.
                    //if it does it incriments i. then once iteration has finished returns i.
                foreach (KeyValuePair<string, string> kvp in DG)
                {
                    if (s == kvp.Key) 
                        i++;
                }
                return i;
            }
            
        }


        /// <summary>
        /// Reports whether dependents(s) is non-empty.
        /// </summary>
        public bool HasDependents(string s)
        {
                //once "s" is found in the dependee position it is known to have a dependent - returns true.
                //else returns false;
            foreach (KeyValuePair<string, string> kvp in DG)
            {
                if (s == kvp.Key)
                {
                    return true;
                    
                }

            }
            return false;
        }


        /// <summary>
        /// Reports whether dependees(s) is non-empty.
        /// </summary>
        public bool HasDependees(string s)
        {
            //once the dependent "s" is found to be in existance it is known to have a dependee - returns true.
            //else returns false;
            foreach (KeyValuePair<string, string> kvp in DG)
            {
                if (s == kvp.Value)
                {
                    return true;

                }

            }
            return false;
        }


        /// <summary>
        /// Enumerates dependents(s).
        /// </summary>
        public IEnumerable<string> GetDependents(string s)
        {

            //Returns all the dependents of dependee "s"
            foreach (KeyValuePair<string, string> kvp in DG)
            {
               
                if(s == kvp.Key)
                    yield return kvp.Value;

                

            }

            
            
        }
       


        /// <summary>
        /// Enumerates dependees(s).
        /// </summary>
        public IEnumerable<string> GetDependees(string s)
        {
            //Returns all the dependees of dependant "s"
            foreach (KeyValuePair<string, string> kvp in DG)
            {

                if (s == kvp.Value)
                    yield return kvp.Key;



            }
        }


        /// <summary>
        /// Adds the ordered pair (s,t), if it doesn't exists
        /// </summary>
        /// <param name="s">Dependee</param>
        /// <param name="t">Dependant</param>
        public void AddDependency(string s, string t)
        {
                DG.Add(new KeyValuePair<string, string>(s, t));

        }


        /// <summary>
        /// Removes the ordered pair (s,t), if it exists
        /// </summary>
        /// <param name="s">Dependee</param>
        /// <param name="t">Dependant</param>
        public void RemoveDependency(string s, string t)
        {
            DG.Remove(new KeyValuePair<string, string>(s, t));
        }


        /// <summary>
        /// Removes all existing ordered pairs of the form (s,r).  Then, for each
        /// t in newDependents, adds the ordered pair (s,t).
        /// </summary>
        ///  <param name="s">Dependee which will have it's Dependents replaced</param>
        ///  <param name="newDependents">Returns the Dependent which will replace the old Dependent</param>
        public void ReplaceDependents(string s, IEnumerable<string> newDependents)
        {
            //Returns all the dependents of dependee "s"
            foreach (KeyValuePair<string, string> kvp in DG)
            {

                if (s == kvp.Key)
                {
                    RemoveDependency(s, kvp.Value);
                    
                }
                
                    AddDependency(s, newDependents);

            }
        }

        private void AddDependency(string s, IEnumerable<string> newDependents)
        {
            throw new NotImplementedException();
        }


        /// <summary>
        /// Removes all existing ordered pairs of the form (r,s).  Then, for each 
        /// t in newDependees, adds the ordered pair (t,s).
        /// </summary>
        ///  <param name="s">Dependent which will have it's dependees replaced</param>
        ///  <param name="newDependees">yield returns a new dependee to replace the old one</param>
        public void ReplaceDependees(string s, IEnumerable<string> newDependees)
        {
                        //Returns all the dependees of dependent "s"
            foreach (KeyValuePair<string, string> kvp in DG)
            {

                if (s == kvp.Value)
                {
                    RemoveDependency(kvp.Key, s);
                    
                }
                
                    
                    AddDependency(newDependees, s);

            }
        }
            //throws exception if not implimented
        private void AddDependency(IEnumerable<string> newDependees , string s )
            {
            throw new NotImplementedException();
            }

        }//end dependency graph class





    } //end spereadsheetutilities namespace






