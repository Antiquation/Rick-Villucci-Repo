using SpreadsheetUtilities;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;

namespace Unit_Test
{
    
    
    /// <summary>
    ///This is a test class for DependencyGraphTest and is intended
    ///to contain all DependencyGraphTest Unit Tests
    ///</summary>
    [TestClass()]
    public class DependencyGraphTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        //public variables

        string child = "A"; // TODO: Initialize to an appropriate value
        string parent = "B"; // TODO: Initialize to an appropriate value
        string child2 = "C";
        string parent2 = "D";
        DependencyGraph target = new DependencyGraph(); // TODO: Initialize to an appropriate value

        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for DependencyGraph Constructor
        ///</summary>
       // [TestMethod()]
  //      public void DependencyGraphConstructorTest()
  //      {
  //          DependencyGraph target = new DependencyGraph();
  //         target.AddDependency("test", "test");
  //          target.AddDependency("test", "isthisworking");
  //          Console.Write(target.);
  //          Assert.Inconclusive("TODO: Implement code to verify target");
  //      }

        /// <summary>
        ///A test for AddDependency
        ///</summary>
        [TestMethod()]
        public void AddDependencyTest()
        { 
           
           
            target.AddDependency(child, parent);
            target.AddDependency(child2, parent);
            target.AddDependency(child2, parent2);//test duplicate - should not be added

            
            Assert.IsTrue(target.Size == 2);//total size should equal
          
        }

        /// <summary>
        ///A test for GetDependees
        ///</summary>
        [TestMethod()]
        public void GetDependeesTest()
        {
            DependencyGraph target = new DependencyGraph(); // TODO: Initialize to an appropriate value
            string s = "B"; // TODO: Initialize to an appropriate value
            IEnumerable<string> expected = null; // TODO: Initialize to an appropriate value
            IEnumerable<string> actual;
            actual = target.GetDependees(s);
            Assert.AreEqual(expected, actual);
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetDependents
        ///</summary>
        [TestMethod()]
        public void GetDependentsTest()
        {
            DependencyGraph target = new DependencyGraph(); // TODO: Initialize to an appropriate value
            string s = string.Empty; // TODO: Initialize to an appropriate value
            IEnumerable<string> expected = null; // TODO: Initialize to an appropriate value
            IEnumerable<string> actual;
            actual = target.GetDependents(s);
            Assert.AreEqual(expected, actual);
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for HasDependees
        ///</summary>
        [TestMethod()]
        public void HasDependeesTest()
        {
            //DependencyGraph target = new DependencyGraph(); // TODO: Initialize to an appropriate value
           // string s = string.Empty; // TODO: Initialize to an appropriate value
           // bool expected = false; // TODO: Initialize to an appropriate value
          //  bool actual;
          //  actual = target.HasDependees(s);
          //  Assert.AreEqual(expected, actual);
           // Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for HasDependents
        ///</summary>
        [TestMethod()]
        public void HasDependentsTest()
        {
            DependencyGraph target = new DependencyGraph(); // TODO: Initialize to an appropriate value
            string s = string.Empty; // TODO: Initialize to an appropriate value
            bool expected = false; // TODO: Initialize to an appropriate value
            bool actual;
            actual = target.HasDependents(s);
            Assert.AreEqual(expected, actual);
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for RemoveDependency
        ///</summary>
        [TestMethod()]
        public void RemoveDependencyTest()
        {
            DependencyGraph target = new DependencyGraph(); // TODO: Initialize to an appropriate value
            string s = string.Empty; // TODO: Initialize to an appropriate value
            string t = string.Empty; // TODO: Initialize to an appropriate value
            target.RemoveDependency(s, t);
            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for ReplaceDependees
        ///</summary>
        [TestMethod()]
        public void ReplaceDependeesTest()
        {
            DependencyGraph target = new DependencyGraph(); // TODO: Initialize to an appropriate value
            string s = string.Empty; // TODO: Initialize to an appropriate value
            IEnumerable<string> newDependees = null; // TODO: Initialize to an appropriate value
            target.ReplaceDependees(s, newDependees);
            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for ReplaceDependents
        ///</summary>
        [TestMethod()]
        public void ReplaceDependentsTest()
        {
            DependencyGraph target = new DependencyGraph(); // TODO: Initialize to an appropriate value
            string s = string.Empty; // TODO: Initialize to an appropriate value
            IEnumerable<string> newDependents = null; // TODO: Initialize to an appropriate value
            target.ReplaceDependents(s, newDependents);
            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for Item
        ///</summary>
        [TestMethod()]
        public void ItemTest()
        {
            AddDependencyTest();
            

           int actual = target[child2];
          Assert.IsTrue(actual == 2);
         //   Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Size
        ///</summary>
        [TestMethod()]
        public void SizeTest()
        {
            DependencyGraph target = new DependencyGraph(); // TODO: Initialize to an appropriate value
            int actual;
            actual = target.Size;
            Assert.Inconclusive("Verify the correctness of this test method.");
        }
    }
}
