// Skeleton implementation written by Joe Zachary for CS 3500, September 2012.
// Version 1.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace SpreadsheetUtilities
{

    /// <summary>
    /// A DependencyGraph can be modeled as a set of ordered pairs of strings.  Two ordered pairs
    /// (s1,t1) and (s2,t2) are considered equal if and only if s1 equals s2 and t1 equals t2.
    /// (Recall that sets never contain duplicates.  If an attempt is made to add an element to a 
    /// set, and the element is already in the set, the set remains unchanged.)
    /// 
    /// Given a DependencyGraph DG:
    /// 
    ///    (1) If s is a string, the set of all strings t such that (s,t) is in DG is called dependents(s).
    ///        
    ///    (2) If s is a string, the set of all strings t such that (t,s) is in DG is called dependees(s).
    //
    // For example, suppose DG = {("a", "b"), ("a", "c"), ("b", "d"), ("d", "d")}
    //     dependents("a") = {"b", "c"}
    //     dependents("b") = {"d"}
    //     dependents("c") = {}
    //     dependents("d") = {"d"}
    //     dependees("a") = {}
    //     dependees("b") = {"a"}
    //     dependees("c") = {"a"}
    //     dependees("d") = {"b", "d"}
    /// </summary>
    public class DependencyGraph
    {
        //publicly accessible Dependency graph
        HashSet<KeyValuePair<string, string>> DG;

        

        /// <summary>
        /// Creates an empty DependencyGraph.
        /// </summary>
        public DependencyGraph()
        {
            

            //The blank dependency graph in the form of a hashset
            DG = new HashSet<KeyValuePair<string, string>>();
            
           
        }


        /// <summary>
        /// The number of ordered pairs in the DependencyGraph.
        /// </summary>
        public int Size
        {
            get { return DG.Count; }
        }


        /// <summary>
        /// The size of dependees(s).
        /// This property is an example of an indexer.  If dg is a DependencyGraph, you would
        /// invoke it like this:
        /// dg["a"]
        /// It should return the size of dependees("a")
        /// </summary>
        public int this[string s]
        {
           //still need to create
            get {
                int i = 0;
                foreach (KeyValuePair<string, string> kvp in DG)
                {
                    if (s == kvp.Key) 
                        i++;
                }
                return i;
            }
            
        }


        /// <summary>
        /// Reports whether dependents(s) is non-empty.
        /// </summary>
        public bool HasDependents(string s)
        {
            return false;
        }


        /// <summary>
        /// Reports whether dependees(s) is non-empty.
        /// </summary>
        public bool HasDependees(string s)
        {
            //if (DG[s].Count == 0)
           //     return true;
           // else
            return false;
        }


        /// <summary>
        /// Enumerates dependents(s).
        /// </summary>
        public IEnumerable<string> GetDependents(string s)
        {

           // return DG[s].GetEnumerator().Current;
            
            
            //foreach(var pair in DG[s].First.Value)
            //{
                //string temp = pair.Key;
                //string temp2 = pair;
              //  return ;

            //}
            return null;
            
        }


        /// <summary>
        /// Enumerates dependees(s).
        /// </summary>
        public IEnumerable<string> GetDependees(string s)
        {
            return null;
        }


        /// <summary>
        /// Adds the ordered pair (s,t), if it doesn't exists
        /// </summary>
        /// <param name="s">Dependee</param>
        /// <param name="t">Dependant</param>
        public void AddDependency(string s, string t)
        {
                DG.Add(new KeyValuePair<string, string>(s, t));

        }


        /// <summary>
        /// Removes the ordered pair (s,t), if it exists
        /// </summary>
        /// <param name="s">Dependee</param>
        /// <param name="t">Dependant</param>
        public void RemoveDependency(string s, string t)
        {
            DG.Remove(new KeyValuePair<string, string>(s, t));
        }


        /// <summary>
        /// Removes all existing ordered pairs of the form (s,r).  Then, for each
        /// t in newDependents, adds the ordered pair (s,t).
        /// </summary>
        ///  <param name="s">Target Dependent</param>
        ///  <param name="newDependents">Returns the Dependee which will replace the old dependee</param>
        public void ReplaceDependents(string s, IEnumerable<string> newDependents)
        {
        }


        /// <summary>
        /// Removes all existing ordered pairs of the form (r,s).  Then, for each 
        /// t in newDependees, adds the ordered pair (t,s).
        /// </summary>
        ///  <param name="s">Target Dependeee</param>
        ///  <param name="newDependees">Returns the dependent which will repace the old depenent</param>
        public void ReplaceDependees(string s, IEnumerable<string> newDependees)
        {
        }

    } //end dependency graph class

}//end spereadsheetutilities namespace


