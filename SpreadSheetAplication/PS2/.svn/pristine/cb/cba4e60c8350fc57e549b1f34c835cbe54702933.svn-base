// Skeleton implementation written by Joe Zachary for CS 3500, September 2012.
// Version 1.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace SpreadsheetUtilities
{

    /// <summary>
    /// A DependencyGraph can be modeled as a set of ordered pairs of strings.  Two ordered pairs
    /// (s1,t1) and (s2,t2) are considered equal if and only if s1 equals s2 and t1 equals t2.
    /// (Recall that sets never contain duplicates.  If an attempt is made to add an element to a 
    /// set, and the element is already in the set, the set remains unchanged.)
    /// 
    /// Given a DependencyGraph DG:
    /// 
    ///    (1) If s is a string, the set of all strings t such that (s,t) is in DG is called dependents(s).
    ///        
    ///    (2) If s is a string, the set of all strings t such that (t,s) is in DG is called dependees(s).
    ///
    /// For example, suppose DG = {("a", "b"), ("a", "c"), ("b", "d"), ("d", "d")}
    ///     dependents("a") = {"b", "c"}
    ///     dependents("b") = {"d"}
    ///     dependents("c") = {}
    ///     dependents("d") = {"d"}
    ///     dependees("a") = {}
    ///     dependees("b") = {"a"}
    ///     dependees("c") = {"a"}
    ///     dependees("d") = {"b", "d"}
    /// </summary>
    public class DependencyGraph
    {
        //publicly accessible Dependency graph
        HashSet<KeyValuePair<string, string>> DG;
       private HashSet<string> depend;

        

        /// <summary>
        /// Creates an empty DependencyGraph.
        /// </summary>
        public DependencyGraph()
        {
            

                //The blank dependency graph in the form of a hashset
            DG = new HashSet<KeyValuePair<string, string>>();
            
           
        }


        /// <summary>
        /// The number of ordered pairs in the DependencyGraph.
        /// </summary>
        public int Size
        {
           
                //returns the number of pairs in the DG
            get { return DG.Count; }

        }


        /// <summary>
        /// The size of dependees(s).
        /// This property is an example of an indexer.  If dg is a DependencyGraph, you would
        /// invoke it like this:
        /// dg["a"]
        /// It should return the size of dependees("a")
        /// </summary>
        /// <param name="s">Takes this string and counts how many dependees it has</param>
        public int this[string s]
        {
           
            get {
                int i = 0;

                    //takes each value pair in DG and checks if s matches the key.
                    //if it does it incriments i. then once iteration has finished returns i.
                foreach (KeyValuePair<string, string> kvp in DG)
                {
                        //if "s" is in the parent position incriment the dependee counter
                    if (s == kvp.Key) 
                        i++;
                }
                    //the total number of dependees
                return i;
            }
            
        }


        /// <summary>
        /// Reports whether dependents(s) is non-empty.
        /// </summary>
        /// <param name="s">Takes the string and returns true or false if it is in the dependee position at least once</param>
        public bool HasDependents(string s)
        {
                //once "s" is found in the dependee position it is known to have a dependent - returns true.
                //else returns false;
            foreach (KeyValuePair<string, string> kvp in DG)
            {
                    //if the string is located in the child position it has
                    //at least one dependent - return true
                if (s == kvp.Key)
                {
                    return true;
                    
                }

            }
                // never found in the child position - return false
            return false;
        }


        /// <summary>
        /// Reports whether dependees(s) is non-empty.
        /// </summary>
        /// <param name="s">Takes the string and returns true or false if it is in the dependent position at least once</param>
        public bool HasDependees(string s)
        {
            //once the dependent "s" is found to be in existance it is known to have a dependee - returns true.
            //else returns false;
            foreach (KeyValuePair<string, string> kvp in DG)
            {
                    //if the string is located in the parent position it has
                    //at least one dependee - return true
                if (s == kvp.Value)
                {
                    return true;

                }

            }
                //never found in the parent position - return false
            return false;
        }


        /// <summary>
        /// Enumerates dependents(s).
        /// </summary>
        /// <param name="s">Takes the string and returns all parents</param>
        /// <returns>IEnumerable of type string</returns>
        public IEnumerable<string> GetDependents(string s)
        {
            //set to be returned
            depend = new HashSet<string>();

                //Returns all the dependents of dependee "s" incrimentaly
            foreach (KeyValuePair<string, string> kvp in DG)
            {
                    //if the string has been found in the child
                    //position yield return - else finish method
                if (s == kvp.Key)
                {
                    GetDependents(kvp.Value);
                }
                    depend.Add(kvp.Value);

                

            }

            foreach (string S in depend)
            {
                yield return S;
            }

            
            
        }
       


        /// <summary>
        /// Enumerates dependees(s).
        /// </summary>
        /// <param name="s">Takes the string and returns all children</param>
        /// <returns>IEnumerable of type string</returns>
        public IEnumerable<string> GetDependees(string s)
        {       //set to be returned
            depend = new HashSet<string>();

            //Returns all the dependees of dependant "s" incrimentaly
            foreach (KeyValuePair<string, string> kvp in DG)
            {
                    //if the string has been found in the parent
                    //position yield return - else finish method
                if (s == kvp.Value)
                {
                    GetDependees(kvp.Key);
                }
                   depend.Add(kvp.Key);



            }

            foreach (string S in depend)
            {
                yield return S;
            }

        }//end GetDependees


        /// <summary>
        /// Adds the ordered pair (s,t), if it doesn't exists
        /// </summary>
        /// <param name="s">Dependee</param>
        /// <param name="t">Dependant</param>
        public void AddDependency(string s, string t)
        {           
                    //creates a new KVP and adds the child parent passed in.
                DG.Add(new KeyValuePair<string, string>(s, t));

        }


        /// <summary>
        /// Removes the ordered pair (s,t), if it exists
        /// </summary>
        /// <param name="s">Dependee</param>
        /// <param name="t">Dependant</param>
        public void RemoveDependency(string s, string t)
        {
                //creates a new KVP and removes the child parent of that instance passed in.
            DG.Remove(new KeyValuePair<string, string>(s, t));
        }


        /// <summary>
        /// Removes all existing ordered pairs of the form (s,r).  Then, for each
        /// t in newDependents, adds the ordered pair (s,t).
        /// </summary>
        ///  <param name="s">Dependee which will have it's Dependents replaced</param>
        ///  <param name="newDependents">The IEnumerable list of new dependents to replace the old ones</param>
        public void ReplaceDependents(string s, IEnumerable<string> newDependents)
        {

            //holds the items to be removed
            List<string> remove = new List<string>();

                //adds all the Dependents of "s" to the "remove" list
            foreach (KeyValuePair<string, string> kvp in DG)
            {
                    //if the string exists in the child position
                    //it is added to the "remove" list
                if (s == kvp.Key)
                {
                        
                    remove.Add(kvp.Value);
                    
                }

                   

            }//end foreach


                //takes the string in "remove" list 
                //plus the string passed into the method to form a
                //child parent KVP and then passes it to the removeDependency method
                //NOTE - s is in the child position!
            foreach (string r in remove)
            {
                //removed the items in list
                RemoveDependency(s, r);
            }

                //Iterates and takes new parent from the IEnumerator wrapped list and
                //pairs it with the parent string passed into the method
                //to form a KVP child parent - then passes it to the AddDepentency method
                //completing the replacement of the desired pairs.
            foreach (string parent in newDependents)
            {

                    //adds the pair
                AddDependency(s, parent);


            }
            
        }//end ReplaceDependents Method

      


        /// <summary>
        /// Removes all existing ordered pairs of the form (r,s).  Then, for each 
        /// t in newDependees, adds the ordered pair (t,s).
        /// </summary>
        ///  <param name="s">Dependent which will have it's dependees replaced</param>
        ///  <param name="newDependees">IEnumerable list of new dependees to replace the old ones</param>
        public void ReplaceDependees(string s, IEnumerable<string> newDependees)
        {
                //holds the items to be removed
            List<string> remove = new List<string>();

                //Removes all the Dependees of "s"         
            foreach (KeyValuePair<string, string> kvp in DG)
            {
                    //if the string exists in the parent position
                    //it is added to the "remove" list
                if (s == kvp.Value)
                {

                    remove.Add(kvp.Key);
                }

                    
            }//end foreach


                //takes the string in "remove" list 
                //plus the string passed into the method to form a
                //child parent KVP and then passes it to the removeDependency method
                //NOTE - s is in the parent position!
            foreach(string r in remove)
            {
                    //removed the items in list
                    RemoveDependency(r, s);
            }

                //Iterates and takes new child from the IEnumerator wrapped list and
                //pairs it with the parent string passed into the method
                //to form a KVP child parent - then passes it to the AddDepentency method
                //completing the replacement of the desired pairs.
            foreach (string child in newDependees)
            {

                    //adds the pair
                AddDependency(child, s);


            }


        }//end ReplaceDependee Method


    }//end dependency graph class






} //end spereadsheetutilities namespace






